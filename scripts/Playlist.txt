// vim: ft=javascript fileencoding=utf-8 bomb et:

// ==PREPROCESSOR==
// @author "Elia >>> http://elia-is-me.github.io"
// @version "0.0.2"
// @import "E:\GitHub\Foobar2000-JScripts\common\common4.js"
// ==/PREPROCESSOR==

// @import "E:\GitHub\Foobar2000-JScripts\scripts\Playlist.txt"

// please change files' path by yourselves.


var list_gr = [],
    list_dr = [],
    list = null,
    list_;
var list_sel = [], last_sel;
var tf_string = fb.TitleFormat("%album artist%^^%album%^^%discnumber%^^%tracknumber%^^%title%^^%artist%^^%rating%^^%length%");

var m_x = 0, m_y = 0,
    ww = 0, wh = 0,
    scroll = 0, scroll_ = 0, scroll__ = 0, scroll___ = 0,
    repaint_visible = 0,
    time_dl = 0;

var time111 = (new Date()).getTime(),
    time222 = time111,
    time333 = time111;

var time_h = fb.CreateProfiler(),
    time_repaint = fb.CreateProfiler(),
    time200 = fb.CreateProfiler("aaaa"),
    time_s = fb.CreateProfiler();

var window_visible = false,
    hold_shift = false, hold_ctrl = false,
    hold_scroll = false, mouse_in = false,
    mouse_hold = false,
    repaint_f1 = false, repaint_f2 = false, repaint_f = false,
    repaint_main1 = true, repaint_main2 = true, repaint_main = true;

// Properties

var group_by = window.GetProperty("Group by", 0), // 0 - no group, 1 - typical
    auto_collapse = window.GetProperty("auto collapse", false),
    font_size = window.GetProperty("font_size", 14),
    font_name = window.GetProperty("font_name", "segoe ui"),
    row_height = window.GetProperty("row height", 35),
    //margin_top = row_height * 3;
    margin_top = row_height;
    Tooltip = window.GetProperty("Tooltip", false);

var g_tooltip = window.CreateTooltip(),
    tooltip_state = false, time_tooltip_ = 0;
g_tooltip.Text = " ";

var color_txt = eval(window.GetProperty("Color text", "RGB(225, 225, 225)")),
    color_bg = eval(window.GetProperty("Color bg", "RGB(34, 34, 34)")),
    color_bg_sel = eval(window.GetProperty("Color bg_sel", "RGB(130, 90, 44)"));


var g_font, g_font2


var research = false,
    search_done = false,
    research_k = 0,
    research_count = 0;

setfont();

function setfont() {
    if (!utils.CheckFont(font_name)) {
        font_name = "tahoma";
    }
    g_font = gdi.Font(font_name, font_size, 0);
    g_font2 = gdi.Font(font_name, font_size, 1);
}



function get_list(start, string_comp, force) {

    var Time = fb.CreateProfiler();

    if (start == null) {
        scroll = 0;
        start = 0;
    }

    var k = start, temp = "";
    var total = list.Count, metadb;

    while (k < total) {
        metadb = list.Item(k);
        temp = tf_string.EvalWithMetadb(metadb).split("^^");
        list_dr.push({
            metadb: metadb,
            string: temp,
            sel: false,
        });
        k++;
        if (!force && Time.Time > 30) {
            research = true;
            research_k = k;
            research_count++;
            return;
        }
    }

    //fb.trace("list_dr.length: " + list_dr.length);
    repaint_main1 = repaint_main2;
    research_count = 0;

}


var tmp_out;

function on_size() {
    ww = window.Width;
    wh = window.Height;
    if (!ww || !wh)
        return;
    repaint_main1 = repaint_main2;
    repaint_f1 = repaint_f2;
    tmp_out && window.ClearInterval(tmp_out);
    tmp_out = window.SetInterval(function () {
        if (window.IsVisible) {
            repaint_main1 = repaint_main2;
            repaint_f1 = repaint_f2;
            tmp_out && window.ClearInterval(tmp_out);
        }
    }, 500);
}

function repaint() {
    repaint_main1 = repaint_main2;
    //window.Repaint();
}

function on_paint(gr) {

    gr.FillSolidRect(0, 0, ww, wh, color_bg);

    //if (!repaint_main && !repaint_f)
        //repaint_main = repaint_f = true;
    //if (repaint_main) {
        //repaint_main = false;

        var start_ = 0, end_ = 0;
        var y_, scrb_vis;

        start_ = Math.round(scroll_ / row_height + 0.4);
        end_ = Math.round((scroll_ + wh - margin_top) / row_height - 0.5);
        end_ = (list_dr.length < end_) ? list_dr.length : end_;

        scrb_vis = (list_dr.length * row_height > wh - row_height);

        for (var i = start_; i < end_; i++) {
            y_ = margin_top + row_height * i - scroll_;
            // Odd/Even
            gr.FillSolidRect(10, y_, ww - 20 - (scrb_vis ? 14 : 0), row_height, i%2 ? 0x05ffffff : 0);
            // Sel
            if (list_dr[i].sel) {
                gr.FillSolidRect(10, y_, ww-20-(scrb_vis?14:0), row_height, color_bg_sel);
            }

            gr.GdiDrawText(list_dr[i].string[3], g_font, color_txt, 20, y_, 50, row_height, DT_CENTER | DT_VCENTER | DT_CALCRECT);
            gr.GdiDrawText(list_dr[i].string[7], g_font, color_txt, ww-10-50-(scrb_vis?14:0), y_, 50, row_height, DT_CENTER | DT_VCENTER | DT_CALCRECT);
            gr.GdiDrawText(list_dr[i].string[4], g_font, color_txt, 20+50, y_, ww-10-50-(scrb_vis?14:0)-20-50, row_height, DT_VCENTER | DT_NOPREFIX | DT_CALCRECT | DT_END_ELLIPSIS);
        }

        var color2 = blendColors(color_txt, color_bg, 0.5);
        gr.GdiDrawText("#", g_font2, color2, 20, margin_top - row_height, 50, row_height, DT_CENTER | DT_VCENTER | DT_CALCRECT);
        gr.GdiDrawText("Length", g_font2, color2, ww-60-(scrb_vis?14:0), margin_top - row_height, 50, row_height, DT_CENTER | DT_VCENTER | DT_CALCRECT);
        gr.GdiDrawText("Ttile", g_font2, color2, 20+50, margin_top - row_height, ww-10-50-(scrb_vis?14:0)-20-50, row_height, DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS);

        // Scroll Bar
        var list_h = wh - margin_top,
            total_h = list_dr.length * row_height,
            cursor_y, cursor_h;
        if (list_h < total_h) {
            cursor_h = Math.round(list_h / total_h * list_h);
            cursor_h = (cursor_h < 25 ? 25 : cursor_h);
            cursor_y = margin_top + Math.round((list_h - cursor_h) * scroll_ / (total_h - list_h));
            gr.FillSolidRect(ww - 11, cursor_y, 10, cursor_h, color_txt & 0x33ffffff);
        }
    //}
    //if (repaint_f) {
        //repaint_f = false;
    //}

}
    
function check_scroll(scroll___) {
    scroll___ = Math.round(scroll___ / row_height) * row_height;
    if (scroll___ > (list_dr.length * row_height - (wh - margin_top) + row_height))
        scroll___ = Math.round((list_dr.length * row_height - (wh - margin_top) + row_height) / row_height - 0.5) * row_height;
    if (list_dr.length * row_height < wh - margin_top || scroll___ < 0)
        scroll___ = 0;
    return scroll___;
}

function on_timer_(timer233) {
    time_dl = time_s.Time;
    time_s.Reset();
    if (research) {
        research = false;
        get_list(research_k, "");
        return;
    }

    var d = new Date();
    if (d.getTime() - time222 < 15)
        return;
    else
        time222 = d.getTime();

    var repaint_1 = false,
        repaint_2 = false;
    if (repaint_f1 == repaint_f2) {
        repaint_f2 = !repaint_f1;
        repaint_1 = true;
    }

    if (repaint_main1 == repaint_main2) {
        repaint_main2 = !repaint_main1;
        repaint_2 = true;
    }

    scroll = check_scroll(scroll);

    if (Math.abs(scroll - scroll_) > 0.5) {
        scroll___ += (scroll - scroll___) * (1 - Math.pow(0.9, time_dl / 4));
        scroll__ += (scroll___ - scroll__) * (1 - Math.pow(0,9, time_dl / 4));
        scroll_ += (scroll__ - scroll_) * (1 - Math.pow(0,9, time_dl / 4));
        repaint_2 = true;
    }

    if (repaint_1 && repaint_2) {
        time_s.Reset();
        repaint_main = true;
        repaint_f = true;
        window.Repaint();
    } else if (repaint_1) {
        repaint_f = true;
        window.RepaintRect(0, 0, ww, margin_top - row_height, true);
    } else if (repaint_2) {
        repaint_main = true;
        time_s.Reset();
        window.RepaintRect(0, margin_top - row_height, ww, wh - margin_top + row_height, true);
    }

}





function on_mouse_wheel(step) {
    repaint_main1 = repaint_main2;
    scroll -= step * row_height * 3;
    scroll = check_scroll(scroll);
}

function check_tiem(obj, x, y) {
    if (!obj) return false;
    //return (x > (
    return true;
}

function on_mouse_lbtn_down(x, y, mask) {
    mouse_l_hold = true;
    if (y > margin_top) {
        var tam = Math.round((y + scroll - row_height * 1.5) / row_height);
        if (tam < list_dr.length && tam >= 0) {
        }
    }
    if (list_dr.length * row_height > wh - margin_top && x > ww - 11 && x < ww - 1) {
        hold_scroll = true;
        scroll = Math.round((((y - margin_top) * (list_dr.length * row_height) / (wh - margin_top)) - (wh - margin_top) / 2) / row_height - 0.5) * row_height;
    } else if (y > margin_top) { 
        var temp_id = Math.round((y + scroll - margin_top) / row_height - 0.5);
        if (temp_id < list_dr.length && temp_id >= 0) {
            var temp_dr = list_dr[temp_id];
            // ITEM CHOOSE
            mm_x = x; mm_y = y;
            mouse_drag = true;
            if (!temp_dr.sel) {
                on_chose(temp_id, false);
                selected_cursor = temp_id;
                mouse_hold = true;
            } else if (utils.IsKeyPressed(0x11)) {
                on_chose(temp_id, temp_dr.sel);
            }
        } else {
            on_chose(-1);
        }
        repaint();
    } else {
        on_chose(-1);
    }

}

function on_mouse_lbtn_up(x, y, mask) {
    mouse_drag = mouse_hold = mouse_l_hold = hold_scroll = false;
}

function on_mouse_move(x, y, mask) {
    if (m_x == x && m_y == y)
        return; // ...
    mouse_in = true;
    m_x = x; m_y = y;
    var tam = Math.round((y - margin_top) / row_height - 0.5);
    if (tam < list_dr.length && tam >= 0) {
        repaint_main1 = repaint_main2;
    }
    if (hold_scroll) {
        scroll = Math.round((((y - margin_top) * (list_dr.length * row_height) / (wh - row_height)) - (wh - row_height) / 2) / row_height - 0.5) * row_height;;
    }
}

function on_chose(index, mouse_up) {
    repaint();
    if (index == -1) {
        for (var k = 0; k < list_dr.length; k++) {
            list_dr[k].sel = false;
        }
        list_sel = [];
    } else if ((utils.IsKeyPressed(0x10) || mouse_hold) && last_sel >  -1) { // SHIFT
        list_sel = [];
        var dd = (index > last_sel) ? 1 : -1;
        if (!utils.IsKeyPressed(0x11)) {
            for (var k = 0; k < list_dr.length; k++) {
                list_dr[k].sel = false;
            }
        }
        for (var k = last_sel;  ; k+=dd) {
            list_dr[k].sel = true;
            //list_sel.push.apply(list_sel, list_dr
            if (k == index) break;
        }
        repaint_main1 = repaint_main2;
    } else if (utils.IsKeyPressed(0x11)) { // CTRL
        list_dr[index].sel = !(list_dr[index].sel);
        last_sel = index;
    } else if (!mouse_up) {
        list_sel = [];
        for (var k = 0; k < list_dr.length; k++) {
            list_dr[k].sel = false;
        }
        list_dr[index].sel = true;
        last_sel = index;
    }
}



window.SetTimeout(function () {
    list = plman.GetPlaylistItems(plman.ActivePlaylist);
    get_list();
}, 20);


window.SetInterval(function () {
    on_timer_(0);
}, 15);
