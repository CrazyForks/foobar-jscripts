// vim: set ft=javascript fileencoding=utf-8 bomb et:

// ==PREPROCESSOR==
// @author "Elia >>> http://elia-is-me.github.io"
// @version "0.0.4"
// @import "E:\GitHub\Foobar2000-JScripts\common\common4.js"
// ==/PREPROCESSOR==
//
// foobar2000 v1.3.3+ and WSH Panel Mod Plus 1.5.7+ required.

var font_name = "Segoe UI Semibold",
    font_name_b = "Segoe UI",
    font_assets = "segoe mdl2 assets",
    font_time, font_cover, font_title, font_alb;

var color_bg, color_txt, color_txt2;
var color_bg_ = 0, 
    color_txt_ = 0;
get_colors();


var tf_title = fb.TitleFormat("%title%"),
    tf_art = fb.TitleFormat("$if2([%artist%],未知艺人)"),
    tf_len = fb.TitleFormat("[%length%]"),
    tf_art_alb = fb.TitleFormat("%album artist%^^%album%");

var shuffle_type = window.GetProperty("Shuffle type", 4),
    auto_mode = window.GetProperty("auto_mode", false),
    layout_mode = window.GetProperty("layout_mode(0-2)", 1);
var background_mode = window.GetProperty("bg_mode(0-2)", 1); 
var wpp_blurred = window.GetProperty("wallpaper blurred", true),
    wpp_blur_val = window.GetProperty("wallpaper blur value", 45);
var wpp_blurred_alpha = window.GetProperty("blurred alpha", 150);

var pb_length = "-:--",
    pb_time = "-:--",
    title_str = "",
    art_str = "";

var ww = 0, wh = 0;
var double_clicked = false;
var drag_window = false, 
    fb_wnd = GetFBWnd();

var images = {}, 
    buttons = {}, buttons_ = {}, sk, vol,
    volpanel = { 
        visible: false, 
        x: 0, 
        y: 0, 
        w: 180, 
        h: 30,
        isMouseOver: function(x, y) {
            var isOver = (x > this.x && x < this.x+this.w && y > this.y && y < this.y+this.h);
            return isOver && this.visible;
        },
    },
    cover = { visible: false, x: 0, y: 0, w: 0, h: 0 };

var DT_CC = DT_CENTER | DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX;
var DT_LC = DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX;


function check_properties() {
    // check shuffle type
    shuffle_type = parseInt(shuffle_type);
    if (shuffle_type < 3 || shuffle_type > 6) {
        shuffle_type = 4;
        window.SetProperty("Shuffle type", shuffle_type);
    }
    // check fonts
}

function get_objects() {
    sk = new Slider(images.nob,
            function () {
                try {
                    return fb.PlaybackTime / fb.PlaybackLength;
                } catch (e) { return 0 };
            }, function (pos) {
                try {
                    fb.PlaybackTime = fb.PlaybackLength * pos;
                } catch (e) {};
            });
    vol = new Slider(images.nob,
            function () {
                return vol2pos(fb.Volume);
            }, function (pos) {
                fb.Volume = pos2vol(pos);
            });
    // buttons
    buttons_ = {
        mute: new Button(function () {
           fb.VolumeMute();
        })
    };
    buttons = {
        prev: new Button(function () {fb.Prev() }),
        playOrPause: new Button(function () {
            double_clicked ? (fb.IsPlaying && fb.Stop()) : fb.PlayOrPause();
        }),
        next: new Button(function () { fb.Next() }),
        pbo: new Button(function () {
            var order = fb.PlaybackOrder;
            switch (true) {
                case (order < 2):
                    fb.PlaybackOrder += 1;
                    break;
                case (order == 2):
                    fb.PlaybackOrder = shuffle_type;
                    break;
                default:
                    fb.PlaybackOrder = 0;
                    break;
            }
        }),
        volume: new Button(function () {
            volpanel.visible = !volpanel.visible;
            if (volpanel.visible) {
                buttons.mute = buttons_.mute
            } else {
                buttons["mute"] && delete buttons["mute"];
            }
            repaint();
        })
    };

}

function get_volume_image() {
    var img,
        val = vol2pos(fb.Volume);
    switch (true) {
        case (val == 0):
            img = images.volume0;
            break;
        case (val < 0.33):
            img = images.volume1;
            break;
        case (val < 0.66):
            img = images.volume2;
            break;
        default:
            img = images.volume3;
            break;
    };
    return img;
};


function repaint () {
    window.Repaint();
}

function pos2vol(pos) {
	return (50 * Math.log(0.99 * pos + 0.01) / Math.LN10);
};

function vol2pos(v) {
	return ((Math.pow(10, v / 50) - 0.01) / 0.99);
};

function get_images() {
    var g, w, img = null;
    var font_i = gdi.Font(font_assets, 15);
    var sf = StringFormat(1, 1);
    var create_image = function (obj, font, color, w, h) {
        for (var i in obj) {
            img = gdi.CreateImage(w, h);
            g = img.GetGraphics();
            g.SetTextRenderingHint(3);
            g.DrawString(obj[i], font, color, 0, 0, w, h, sf);
            g.DrawString(obj[i], font, color, 0, 0, w, h, sf);
            g.SetTextRenderingHint(0);
            images[i] && images[i].Dispose();
            images[i] = img;
        }
    };

    var ico1 = {
        "prev": "\ue100",
        "pause": "\ue103",
        "play": "\ue102",
        "next": "\ue101",
        "volume": "\ue15d",
        "shuffle": "\ue14b",
        "repeat": "\ue149",
        "repeat1": "\ue1cc",
        "normal": "\ue13c",
    },
    ico2 = {
        "volume0": "\ue992",
        "volume1": "\ue993",
        "volume2": "\ue994",
        "volume3": "\ue995",
    };

    w = 40;
    create_image(ico1, font_i, color_txt, w, w);
    create_image(ico2, font_i, color_bg, w, w);

    // create nob image
    w = 16;
    images.nob && images.nob.Dispose();
    images.nob = gdi.CreateImage(w, w);
    g = images.nob.GetGraphics();
    g.SetSmoothingMode(2);
	g.FillEllipse(1, 1, w-3, w-3, color_txt);
    g.FillEllipse(3, 3, w-7, w-7, color_bg);
    g.SetSmoothingMode(0);
    images.nob.ReleaseGraphics(g);

    // playbackOrder bg state image
    w = 40;
    images.pbo_bg && images.pbo_bg.Dispose();
    images.pbo_bg = gdi.CreateImage(w, w);
    g = images.pbo_bg.GetGraphics();
    g.SetSmoothingMode(4);
    g.FillEllipse(1, 1, w-4, w-4, color_txt & 0x40ffffff);
    g.SetSmoothingMode(0);
    images.pbo_bg.ReleaseGraphics(g);

    font_i.Dispose();

}



function get_fonts() {
    font_time = gdi.Font(font_name, 14);
    font_cover = gdi.Font(font_assets, 32);
    font_alb = gdi.Font(font_name, 12);
    font_title = gdi.Font(font_name, 14);
}

function get_colors() {
    color_bg = eval(window.GetProperty("Color bg", "RGB(25, 25, 25)"));
    color_txt = eval(window.GetProperty("Color txt", "RGB(235, 235, 235)"));
    color_txt2 = blendColors(color_txt, color_bg, 0.3);
}


function check_mode() {
    switch (true) {
        case (ww < 510):
            layout_mode = 0;
            break;
        case (ww < 930):
            layout_mode = 1;
            break;
        default:
            layout_mode = 2;
            break;
    }
}

var tmp_out;
var layout_mode_;

function on_size() {
    ww = Math.max(320, window.Width);
    wh = window.Height;
    if (auto_mode) 
        check_mode();
    if (layout_mode_ != layout_mode) {
        window.MaxHeight = window.MinHeight = get_panel_height();
        window.NotifyOthers("layout_mode", layout_mode);
        layout_mode_ = layout_mode;
    }

    tmp_out && window.ClearInterval(tmp_out);
    tmp_out = window.SetInterval(function () {
        refreshWallpaper();
        tmp_out && window.ClearInterval(tmp_out);
    }, 500);
}

function refreshWallpaper() {
    if (cover.img_large) {
        //var img = cover.img_large;
        //cover.img_large = cover.img_large.Clone(0, img.Height/3*2, img.Width, img.Height/3-2);
        Wpp.image = GetWallpaper(cover.img_large);
    } else {
        Wpp.image = null;
    }
    window.Repaint();
}

function get_pbo_image(order) {
    var img;
    switch (order) {
        case 0:
            img = images.normal;
            break;
        case 1:
            img = images.repeat;
            break;
        case 2:
            img = images.repeat1;
            break;
        case 3:
        default:
            img = images.shuffle;
            break;
    }
    return img;
}


function on_paint(gr) {

    // bg
    if (fb.IsPlaying && Wpp.image && (background_mode == 2)) {
        gr.GdiDrawBitmap(Wpp.image, 0, 0, ww, wh, 0, 0, Wpp.image.Width, Wpp.image.Height);
        gr.FillSolidRect(0, 0, ww, wh, setAlpha(color_bg, wpp_blurred_alpha));
    } else {
        gr.FillSolidRect(0, 0, ww, wh, color_bg);
        if (background_mode == 1)
            gr.FillSolidRect(0, 0, ww, wh, color_bg_);
    }

    // Buttons
    var pad = 10,
        bt_w = images.prev.Width,
        bt_x, bt_y;
    var bt_imgs = {
        prev: images.prev,
        playOrPause: fb.IsPlaying && !fb.IsPaused ? images.pause : images.play,
        next: images.next,
        pbo: get_pbo_image(fb.PlaybackOrder),
        volume: images.volume,
        mute: get_volume_image(),
    };
    bt_x = (layout_mode == 0) ? Math.round((ww - bt_w * 5 - pad * 4) / 2) : bt_x = ww - bt_w * 5 - pad * 5;
    bt_y = (layout_mode < 2) ? Math.round((wh + 22 -bt_w) / 2) : Math.round((wh - bt_w) / 2);
    // DRAW
    for (var i in buttons) {
        if (i == "mute") continue;
        buttons[i].draw(gr, bt_imgs[i], bt_x, bt_y, bt_w, bt_w);
        bt_x += (bt_w + pad);
    }
    // DRAW PBO BG
    if (fb.PlaybackOrder > 0) {
        var b = buttons.pbo;
        var img = images.pbo_bg;
        gr.DrawImage(img, b.x, b.y, b.w, b.h, 0, 0, img.Width, img.Height, 0, 255);
    }

    // Cover & Info
    cover.visible = (layout_mode > 0);
    if (cover.visible && fb.IsPlaying) {
        cover.x = 10;
        var alb_w, alb_x, alb_y;
        if (layout_mode < 2) {
            cover.y = 35;
            cover.w = cover.h = wh - cover.y - 10;
            alb_w = buttons["prev"].x - cover.x - cover.w - 30;
        } else {
            cover.y = 10;
            cover.w = cover.h = wh - 20;
        }
        alb_w = Math.min(180, buttons["prev"].x - cover.x - cover.w - 30);

        if (cover.img) {
            gr.DrawImage(cover.img, cover.x, cover.y, cover.w, cover.h, 0, 0, cover.img.Width, cover.img.Height, 0, 255);
        } else {
            gr.SetTextRenderingHint(3);
            gr.DrawString("\uE958", font_cover, color_txt2, cover.x, cover.y, cover.w, cover.h, StringFormat(1, 1));
            gr.SetTextRenderingHint(0);
        }

        // INFO
        if (alb_w > 100) {
            alb_x = cover.x + cover.w + 10;
            var alb_y = cover.y + (cover.h - font_title.Height - font_alb.Height - 2) / 2 | 0;
            gr.GdiDrawText(title_str, font_title, color_txt, alb_x, alb_y, alb_w, font_title.Height, DT_LC);
            gr.GdiDrawText(art_str, font_alb, color_txt2, alb_x, alb_y+font_title.Height+2, alb_w, font_alb.Height, DT_LC);
        }
    }

    // Time & Seek
    if (fb.IsPlaying) {
        var time_w1 = gr.CalcTextWidth(pb_time, font_time)+1, 
            time_w2 = gr.CalcTextWidth(pb_length, font_time)+1;
        if (layout_mode < 2) {
            gr.GdiDrawText(pb_time, font_time, color_txt, 15, 7, time_w1, 20, DT_CC);
            gr.GdiDrawText(pb_length, font_time, color_txt, ww-time_w2-15, 7, time_w2, 20, DT_CC);
            sk.draw(gr, 20+time_w1+20, 7, ww-time_w2-time_w1-20*2-20*2, 20, 9, color_txt, color_txt & 0x50ffffff);
        } else {
            if (buttons["prev"].x-20-time_w2-20-cover.w-240-time_w1-20 > 120) {
                gr.GdiDrawText(pb_time, font_time, color_txt, cover.w+20+200+20, (wh-20)/2, time_w1, 20, DT_CC);
                gr.GdiDrawText(pb_length, font_time, color_txt, buttons["prev"].x-20-time_w2, (wh-20)/2, time_w2, 20,  DT_CC);
                sk.draw(gr, cover.w+240+time_w1+20, (wh-20)/2, buttons["prev"].x-20-time_w2-20-cover.w-240-time_w1-20, 20, 9, color_txt, color_txt & 0x50ffffff);
            }
        }
    }


    if (volpanel.visible) {
        var b = buttons["volume"];
        if (layout_mode < 2) {
            volpanel.h = 30;
            volpanel.w = 30 * 7;
            volpanel.x = b.x + b.w/2 - volpanel.w/2;
            if (volpanel.x + volpanel.w + 2 > ww) 
                volpanel.x = ww - 2 - volpanel.w;
            volpanel.y = 2;
            if (b.y - volpanel.y - volpanel.h > 10) {
                volpanel.y = b.y - volpanel.h - 10;
            }
            bt_imgs["mute"] = bt_imgs["mute"].Clone(0, 5, 40, 30);
        } else {
            volpanel.h = 40;
            volpanel.w = 40 * 6;
            volpanel.x = b.x - volpanel.w - pad;
            volpanel.y = (wh - volpanel.h) /2;
        }
        gr.FillSolidRect(volpanel.x-2, volpanel.y-2, volpanel.w+4, volpanel.h+4, color_bg);
        gr.FillSolidRect(volpanel.x, volpanel.y, volpanel.w, volpanel.h, color_txt);
        buttons["mute"] &&
            buttons["mute"].draw(gr, bt_imgs["mute"], volpanel.x, volpanel.y, 40, volpanel.h);
        vol.draw(gr, volpanel.x+40, volpanel.y+(volpanel.h-20)/2, volpanel.w-40-40, 20, 9, color_bg, color_bg & 0x50ffffff);
        gr.GdiDrawText(Math.round(fb.Volume+100), font_time, color_bg, volpanel.x+volpanel.w-40, volpanel.y, 40, volpanel.h, DT_CC);
    }

}


var alb_old = "!@#";

function on_metadb_changed (handlelist, fromhook) {

    var metadb = fb.IsPlaying ? fb.GetNowPlaying() : null;

    if (metadb) {
        art_str = tf_art.EvalWithMetadb(metadb);
        title_str = tf_title.EvalWithMetadb(metadb);

        var alb = tf_art_alb.EvalWithMetadb(metadb);
        if (alb != alb_old) {
            utils.GetAlbumArtAsync(window.ID, metadb, AlbumArtId.front);
            alb_old = alb;
        }
    } else {
        cover.img = null;
        art_str = "";
        title_str = "";
    }

    repaint();
}

function on_playback_new_track(metadb) {
    pb_time = "0:00";
    pb_length = tf_len.EvalWithMetadb(metadb);
    sk.update();
    on_metadb_changed();
}

function on_playback_seek(time) {
    on_playback_time(time);
}

function on_playback_time(time) {
    pb_time = utils.FormatDuration(time);
    sk.update();
}

function on_playback_pause(state) {
    repaint();
}

function on_playback_stop(reason) {
    if (reason != 2) {
        pb_time = "-:--";
        pb_length = "-:--";
        alb_old = "#@!";
        sk.update();
        on_metadb_changed();
        on_get_album_art_done();
    }
}

var color_timer = null;
var Wpp = {};

function getWallpaper(img) {
    if (!img) { return img; }
    var img = FormatWallpaper(img, ww, wh, 2, 0, 0, "", true);
    return img;
}

function GetWallpaper(img) {
    if (!img) {
        return null;
    }
    img = img.Resize(ww, img.Height / img.Width * ww, 7);
    if (wpp_blur_val < 0 || wpp_blur_val > 255) {
        wpp_blur_val = 0;
    }
    if (wpp_blur_val > 0)
        img.StackBlur(wpp_blur_val, 2);

    try {
        return img.Clone(0, img.Height - wh-5, ww, wh).CreateRawBitmap();
    } catch (e) {
        return null;
    }

}



function on_get_album_art_done(metadb, art_id, image, image_path) {
    cover.img = image;
    cover.img_large = image;
    // GET COVER
    if (cover.img) {
        cover.img_large = image;
        cover.img = cover.img.Resize(40, 40);
    }
    //  GET BACKGROUND
    if (background_mode > 0) {
        color_bg_ = color_bg;
        if (cover.img && background_mode == 1) {
            var objcolor = get_color_scheme_from_image(cover.img);
            color_txt = objcolor.text;
            color_txt2 = objcolor.text2;
            color_bg = objcolor.background;
        } else {
            get_colors();
        }
    } else {
        get_colors();
    }

    if (background_mode != 1)
        refresh_colors();
    else {
        var alpha1 = 255;
        color_timer && window.ClearInterval(color_timer);
        color_timer = window.SetInterval(function () {
            alpha1 -= 30;
            alpha1 = alpha1 < 0 ? 0 : alpha1;
            color_bg_ = setAlpha(color_bg_, alpha1);
            color_bg = setAlpha(color_bg, 255 - alpha1);
            refresh_colors();
            window.Repaint();
            if (alpha1 == 0) {
                window.ClearInterval(color_timer);
            }
        }, 60);
    }
    
    refreshWallpaper();
}

function on_playback_order_changed(new_order) {
    if (new_order > 2 && new_order != shuffle_type) {
        fb.PlaybackOrder = shuffle_type;
        return;
    }
    window.Repaint();
}

function on_volume_change(val) {
    vol.update();
}

function on_mouse_wheel(step) {
    if (volpanel.visible) {
        fb.Volume += step * Math.exp(-fb.Volume / 33.333);
    }
}

function on_mouse_move(x, y) {
    if (fb.IsPlaying) {
        sk.move(x, y);
        if (sk.is_drag)
            on_playback_time(fb.PlaybackTime);
    }
    vol.move(x, y);
    for (var i in buttons) {
        buttons[i].move(x, y);
    }
}


function on_mouse_lbtn_down(x, y, mask) {
    drag_window = true;
    var over_volpanel = volpanel.visible && volpanel.isMouseOver(x, y);
    if (over_volpanel) {
        vol.down(x, y);
        drag_window = false;
    } else {
        if (fb.IsPlaying)
            sk.down(x, y);
        if (!buttons.volume.is_mouse_over(x, y) && volpanel.visible)
            volpanel.visible = false;
        repaint();
        if (sk.is_drag || vol.is_drag) {
            drag_window = false;
        }
    }

    for (var i in buttons) {
        if (!over_volpanel && i != "mute")
            buttons[i].down(x, y) && (drag_window = false);
    }
    if (over_volpanel && buttons["mute"]) {
        buttons["mute"].down(x, y) && (drag_window = false);
    }

    if (drag_window) {
        utils.ReleaseCapture();
        fb_wnd.SendMsg(0xA1, 2, 0);
    }

}

function on_mouse_lbtn_up(x, y, mask) {
    var over_volpanel = volpanel.visible && volpanel.isMouseOver(x, y);

    drag_window = false;
    sk.up(x, y);
    vol.up(x, y);
    for (var i in buttons) {
        if (!over_volpanel && i != "mute" && buttons[i].up(x, y)) {
            buttons[i].on_click(x, y);
        }
    }
    if (buttons["mute"] && over_volpanel) {
        buttons["mute"].up(x, y) && buttons["mute"].on_click(x, y);
    }
    if (double_clicked) {
        double_clicked = false;
    }
}

function on_mouse_rbtn_up(x, y, mask) {
    if (mask != MK_SHIFT) {
        var menu = window.CreatePopupMenu(); // main
        var st = window.CreatePopupMenu(); // shuffle type
        var pref = window.CreatePopupMenu(); // preferences
        var ret;

        // base
        pref.AppendTo(menu, MF_STRING, "Preferences");
        menu.AppendMenuItem(MF_STRING,  2, "Properties...");
        st.AppendTo(menu, MF_STRING, "Shuffle");
        menu.AppendMenuSeparator();
        menu.AppendMenuItem(fb.IsPlaying ? MF_STRING : MF_DISABLED, 1, "Stop");
        // preferences
        if (!auto_mode) {
            pref.AppendMenuItem(MF_STRING, 10, "Layout 1");
            pref.AppendMenuItem(MF_STRING, 11, "Layout 2");
            pref.AppendMenuItem(MF_STRING, 12, "Layout 3");
            pref.CheckMenuRadioItem(10, 12, layout_mode+10);
        }
        pref.AppendMenuItem(MF_STRING, 13, "Layout auto-adjust");
        pref.CheckMenuItem(13, auto_mode);
        pref.AppendMenuSeparator();
        pref.AppendMenuItem(MF_STRING, 14, "Style 1");
        pref.AppendMenuItem(MF_STRING, 15, "Style 2");
        pref.AppendMenuItem(MF_STRING, 16, "Style 3");
        pref.CheckMenuRadioItem(14, 16, background_mode+14);
        //if (background_mode == 2) {
            //pref.AppendMenuItem(MF_STRING, 17, "Wallpaper blurred");
            //pref.CheckMenuItem(17, wpp_blurred);
        //}
        // shuffle type
        st.AppendMenuItem(MF_STRING, 19, "Random");
        st.AppendMenuItem(MF_STRING, 20, "Tracks");
        st.AppendMenuItem(MF_STRING, 21, "Albums");
        st.AppendMenuItem(MF_STRING, 22, "Folders");
        st.CheckMenuRadioItem(19, 22, shuffle_type + 16);

        ret = menu.TrackPopupMenu(x, y);

        switch (true) {
            case ret == 1:
                fb.Stop();
                break;
            case ret == 2:
                window.ShowProperties();
                break;
            case (ret >= 10 && ret <= 12):
                layout_mode = ret - 10;
                on_size();
                window.SetProperty("layout_mode(0-2)", layout_mode);
                break;
            case ret == 13:
                auto_mode = !auto_mode;
                on_size();
                window.SetProperty("auto_mode", auto_mode);
                break;
            case (ret >= 14 && ret <= 16):
                background_mode = ret - 14;
                alb_old = "#@!";
                on_metadb_changed();
                window.SetProperty("bg_mode(0-2)", background_mode);
                break;
            case ret == 17:
                alb_old = "#@!";
                wpp_blurred = !wpp_blurred;
                on_metadb_changed();
                window.SetProperty("wallpaper blurred", wpp_blurred);
                break;
            case ret >= 19 && ret <= 22: 
                shuffle_type = ret - 16;
                if (fb.PlaybackOrder >= 3) {
                    fb.PlaybackOrder = shuffle_type;
                }
                window.SetProperty("shuffle_type", shuffle_type);
                break;
            default:
                break;
        }

        menu.Dispose();
        st.Dispose();
        pref.Dispose();
        return true;
    } else {
        return false;
    }
}

function on_mouse_lbtn_dblclk(x, y, mask) {
    double_clicked = true;
    on_mouse_lbtn_down(x, y, mask);
    if (drag_window) {
        window.NotifyOthers("show_now_playing", true);
    }
}

function on_mouse_leave() {
    for (var i in buttons) {
        buttons[i].leave();
    }
}


on_load();

function on_load() {
    check_properties();
    get_fonts();
    get_images();
    get_objects();

    if (fb.IsPlaying) {
        on_playback_new_track(fb.GetNowPlaying());
        on_playback_time(fb.PlaybackTime);
    }
    on_metadb_changed();
    on_playback_order_changed(fb.PlaybackOrder);

}


function get_panel_height() {
    var panel_height;
    switch (layout_mode) {
        case 0:
            panel_height = 90;
            break;
        case 1:
            panel_height = 90;
            break;
        case 2:
        default:
            panel_height = 65;
            break;
    }
    return panel_height;
}


function refresh_colors() {
    get_images();
    get_objects();
}


// FROM NADIRP's FUSION

function get_color_scheme_from_image(img) {

    img = img.Resize(10, 10, 5);
    var color_arr = [],
        Color = {};
    color_arr = img.GetColorScheme(img.Width * img.Height).toArray();
    var len = color_arr.length;

    for (var i = 0; i < len; i++)
        color_arr[i] = toRGB(color_arr[i]);

    Color.background = dominantColor(color_arr, .1);
    var hol = inverseColors(Color.background, color_arr);

    var coltxt1 = colorDistance(Color.background, hol[0]),
        coltxt2 = colorDistance(Color.background, hol[1]),
        coltxtA = [coltxt1, coltxt2].sort();

    if (Luminance(Color.background) > 0.6) {
        Color.background_invert = RGB(35, 35, 35);
    } else {
        Color.background_invert = RGB(235, 235, 235);
    }

    if (coltxtA[0] == coltxt2) {
        Color.text = eval("RGB(" + hol[0] + ")");
        Color.text2 = eval("RGB("  + hol[1] + ")");
        Color.text_selection = (Luminance(Color.background) > 0.6) ? RGB(235, 235, 235) : RGB(10, 10, 10);
    } else {
        Color.text = eval("RGB(" + hol[1] + ")");
        Color.text2 = eval("RGB("  + hol[0] + ")");
        Color.text_selection = (Luminance(Color.background) > 0.6) ? RGB(235, 235, 235) : RGB(10, 10, 10);
    }
    Color.background = eval("RGB(" + Color.background + ")");

    try {
        img.Dispose();
    } catch (e) {};

    return Color;

}


function sqrt(n) {
	return Math.sqrt(n);
};

function pow(n) {
	return Math.pow(n, 2);
};

function rgbToYuv(rgb) {
	return [rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114, rgb[0] * -0.147 + rgb[1] * 0.289 + rgb[2] * 0.436, rgb[0] * 0.615 + rgb[1] * 0.515 + rgb[2] * 0.100];
};

function colorDistance(rgb1, rgb2) {
    var yuv1 = rgbToYuv(rgb1),
        yuv2 = rgbToYuv(rgb2);
    return sqrt(pow(yuv1[0] - yuv2[0])
            + pow(yuv1[1] - yuv2[1])
            + pow(yuv1[2] - yuv2[2]));
};

function gatherSimilarElements(list, comparator) {

	var subsets = [];

	for (var u = 0, U = list.length; u < U; ++u) {

		var element = list[u];
		var closest = null;

		for (var v = 0, V = subsets.length; v < V; ++v)
			if (comparator(subsets[v][0], element))
				break;

		if (v === V) {
			closest = [];
			subsets.push(closest);
		} else {
			closest = subsets[v];
		}

		closest.push(element);

	}

	return subsets;

};

function meanColor(colorList) {

	var finalColor = [0, 0, 0];

	for (var t = 0, T = colorList.length; t < T; ++t) {

		var color = colorList[t];

		finalColor[0] += color[0];
		finalColor[1] += color[1];
		finalColor[2] += color[2];

	}

	finalColor[0] /= colorList.length;
	finalColor[1] /= colorList.length;
	finalColor[2] /= colorList.length;

	return finalColor;

};

function dominantColor(colorList, treshold) {

	if (typeof treshold === 'undefined')
		treshold = 0.1;

	var buckets = gatherSimilarElements(colorList, function (colorA, colorB) {
			return colorDistance(colorA, colorB) < treshold;
		}).sort(function (bucketA, bucketB) {
			return bucketB.length - bucketA.length;
		});

	var color = meanColor(buckets.shift());
	return color;

};

function getContrastYIQ(color) {
	var r = color[0],
	g = color[1],
	b = color[2];

	var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;

	// return (yiq >= 128) ? 'light' : 'dark';
	return yiq;
};

function getDefaultColor(yiq) {
	return (yiq >= 128) ? [0, 0, 0] : [235, 235, 235];
};

function inverseColors(color, palette) {

	var yiq = getContrastYIQ(color);
	var colors = [],
	primaryColor,
	secondaryColor;

	for (var i = 0; i < palette.length; i++) {

		if (Math.abs(getContrastYIQ(palette[i]) - yiq) > 80) {
			colors.push(palette[i]);
		}
	}

	primaryColor = colors[0] ? colors[0] : getDefaultColor(yiq);
	secondaryColor = colors[1] ? colors[1] : getDefaultColor(yiq);

	return [primaryColor, secondaryColor];
};


// FROM BR3TT's JSSMOOTHPLAYLIST
    
var wpp_img_info = {orient: 0, cut: 0, cut_offset: 0, ratio: 0, x: 0, y: 0, w: 0, h: 0};
//var wpp_mode = 0;
//var wpp_image = null;

function draw_blurred_image(image,ix,iy,iw,ih,bx,by,bw,bh,blur_value,overlay_color) {
    var blurValue = blur_value;
    var imgA = image.Resize(iw*blurValue/100,ih*blurValue/100,2);
    var imgB = imgA.resize(iw, ih, 2);
    
    var bbox = gdi.CreateImage(bw, bh);
    // Get graphics interface like "gr" in on_paint
    var gb = bbox.GetGraphics();
    var offset = 90-blurValue;
    gb.DrawImage(imgB, 0-offset, 0-(ih-bh)-offset, iw+offset*2, ih+offset*2, 0, 0, imgB.Width, imgB.Height, 0, 255);
    bbox.ReleaseGraphics(gb);

    var newImg = gdi.CreateImage(iw, ih);
    var gb = newImg.GetGraphics();

    if(ix!=bx || iy!=by || iw!=bw || ih!=bh) {
        gb.DrawImage(image, ix, iy, iw, ih, 0, 0, image.Width, image.Height, 0, 255);
        gb.FillSolidRect(bx,by,bw,bh,0xffffffff);
    };
    gb.DrawImage(bbox, bx, by, bw, bh, 0, 0, bbox.Width, bbox.Height, 0, 255);
    
    // overlay
    if(overlay_color!=null) {
        gb.FillSolidRect(bx,by,bw,bh,overlay_color);
    };
    
    // top border of blur area
    if(ix!=bx || iy!=by || iw!=bw || ih!=bh) {
        gb.FillSolidRect(bx,by,bw,1,0x22ffffff);
        gb.FillSolidRect(bx,by-1,bw,1,0x22000000);
    };
    newImg.ReleaseGraphics(gb);
    
    return newImg;
};



function FormatWallpaper(image, iw, ih, interpolation_mode, display_mode, angle, txt, rawBitmap) {
	if(!image||!iw||!ih) return image;
    //image = image.Clone(0, image.Height / 2, image.Width, image.Height / 2-1);
    var i, j;

    var panel_ratio = iw / ih;
    wpp_img_info.ratio = image.Width / image.Height;
    wpp_img_info.orient = 0;

    if(wpp_img_info.ratio > panel_ratio) {
        wpp_img_info.orient = 1;
        // 1/3 : default image is in landscape mode    
        switch(display_mode) {
            case 0:     // Filling
                //wpp_img_info.w = iw * wpp_img_info.ratio / panel_ratio;
                wpp_img_info.w = ih * wpp_img_info.ratio;
                wpp_img_info.h = ih;
                wpp_img_info.cut = wpp_img_info.w - iw;
                wpp_img_info.x = 0 - (wpp_img_info.cut / 2);
                wpp_img_info.y = 0;
                break;
            case 1:     // Adjust
                wpp_img_info.w = iw;
                wpp_img_info.h = ih / wpp_img_info.ratio * panel_ratio;
                wpp_img_info.cut = ih - wpp_img_info.h;
                wpp_img_info.x = 0;
                wpp_img_info.y = wpp_img_info.cut / 2;
                break;
            case 2:     // Stretch
                wpp_img_info.w = iw;
                wpp_img_info.h = ih;
                wpp_img_info.cut = 0;
                wpp_img_info.x = 0;
                wpp_img_info.y = 0;
                break;
        };
    }; else if(wpp_img_info.ratio < panel_ratio) {
        wpp_img_info.orient = 2;
        // 2/3 : default image is in portrait mode
        switch(display_mode) {
            case 0:     // Filling
                wpp_img_info.w = iw;
                //wpp_img_info.h = ih / wpp_img_info.ratio * panel_ratio;
                wpp_img_info.h = iw / wpp_img_info.ratio;
                wpp_img_info.cut = wpp_img_info.h - ih;
                wpp_img_info.x = 0;
                wpp_img_info.y = 0 - (wpp_img_info.cut / 4);
                break;
            case 1:     // Adjust
                wpp_img_info.h = ih;
                wpp_img_info.w = iw * wpp_img_info.ratio / panel_ratio;
                wpp_img_info.cut = iw - wpp_img_info.w;
                wpp_img_info.y = 0;
                wpp_img_info.x = wpp_img_info.cut / 2;
                break;
            case 2:     // Stretch
                wpp_img_info.w = iw;
                wpp_img_info.h = ih;
                wpp_img_info.cut = 0;
                wpp_img_info.x = 0;
                wpp_img_info.y = 0;
                break;
        };
    }; else {
        // 3/3 : default image is a square picture, ratio = 1
        wpp_img_info.w = iw;
        wpp_img_info.h = ih;
        wpp_img_info.cut = 0;
        wpp_img_info.x = 0;
        wpp_img_info.y = 0;
    };

    var tmp_img = gdi.CreateImage(iw, ih);
    var gp = tmp_img.GetGraphics();
	gp.SetInterpolationMode(interpolation_mode);
    gp.DrawImage(image, wpp_img_info.x, wpp_img_info.y, wpp_img_info.w, wpp_img_info.h, 0, 0, image.Width, image.Height, angle, 255);
	tmp_img.ReleaseGraphics(gp);
    
    // blur it!
    if(wpp_blurred) {
        tmp_img = draw_blurred_image(tmp_img,0,0,tmp_img.Width,tmp_img.Height,0,0,tmp_img.Width,tmp_img.Height,wpp_blur_val,0x00ffffff);
    };
    
	CollectGarbage();
    if(rawBitmap) {
        return tmp_img.CreateRawBitmap();
    }; else {
        return tmp_img;
    };
};



