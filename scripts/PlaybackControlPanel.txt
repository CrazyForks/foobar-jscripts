// vim: set ft=javascript fileencoding=utf-8 bomb et:

// ==PREPROCESSOR==
// @author "Elia >>> http://elia-is-me.github.io"
// @version "0.0.2"
// @import "E:\GitHub\Foobar2000-JScripts\common\common4.js"
// ==/PREPROCESSOR==
//
// foobar2000 v1.3.3+ and WSH Panel Mod Plus 1.5.7+ required.

var font_name = "Segoe UI Semibold",
    font_name_b = "Segoe UI",
    font_time, font_cover, font_title, font_alb;

var color_bg = eval(window.GetProperty("Color bg", "RGB(25, 25, 25)")),
    color_txt = eval(window.GetProperty("Color txt", "RGB(236, 236, 236)")),
    color_txt2 = blendColors(color_txt, color_bg, 0.3);

var tf_title = fb.TitleFormat("[%artist% - ]%title%"),
    tf_alb = fb.TitleFormat("$if2([%album%],未知专辑)"),
    tf_len = fb.TitleFormat("[%length%]");

var shuffle_type = window.GetProperty("Shuffle type", 4),
    auto_mode = window.GetProperty("auto_mode", false),
    ww_mode = window.GetProperty("ww_mode", 2);

var pb_length = "-:--",
    pb_time = "-:--",
    title_str = "",
    alb_str = "";

var ww = 0, wh = 0;
var double_clicked = false;
var window_visble = false,
    repaint_main1 = true, repaint_main2 = true, repaint_main = true,
    drag_window = false, 
    fb_wnd = GetFBWnd();

var images = {}, buttons = [], sk, vol,
    volpanel = { vis: false, x: 0, y: 0, w: 180, h: 30 },
    cover = { vis: false, x: 0, y: 0, w: 0, h: 0 };

var DT_CC = DT_CENTER | DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX;
var DT_LC = DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX;


function check_prop() {
    shuffle_type = parseInt(shuffle_type);
    if (shuffle_type < 3 || shuffle_type > 6) {
        shuffle_type = 4;
        window.SetProperty("Shuffle type", shuffle_type);
    }
}

function get_objects() {
    sk = new Slider(images.nob,
            function () {
                try {
                    return fb.PlaybackTime / fb.PlaybackLength;
                } catch (e) { return 0 };
            }, function (pos) {
                try {
                    fb.PlaybackTime = fb.PlaybackLength * pos;
                } catch (e) {};
            });
    vol = new Slider(images.nob,
            function () {
                return vol2pos(fb.Volume);
            }, function (pos) {
                fb.Volume = pos2vol(pos);
            });
    // buttons
    buttons[0] = new Button(function () { fb.Prev() });
    buttons[1] = new Button(function () {
        if (double_clicked) {
            if (fb.IsPlaying) fb.Stop();
        } else {
            fb.PlayOrPause();
        }
    });
    buttons[2] = new Button(function () { fb.Next() });
    buttons[3] = new Button(function () {
        var od = fb.PlaybackOrder;
        switch (true) {
            case (od < 2): 
                fb.PlaybackOrder += 1;
                break;
            case (od == 2):
                fb.PlaybackOrder = shuffle_type;
                break;
            default:
                fb.PlaybackOrder = 0;
                break;
        } 
    });
    buttons[4] = new Button(function () {
        volpanel.vis = !volpanel.vis;
        repaint();
    });
}

function repaint () {
    //repaint_main1 = repaint_main2;
    window.Repaint();
}

function pos2vol(pos) {
	return (50 * Math.log(0.99 * pos + 0.01) / Math.LN10);
};

function vol2pos(v) {
	return ((Math.pow(10, v / 50) - 0.01) / 0.99);
};

function get_images() {
    var g, w, img = null,
        sf = StringFormat(1, 1);
    var font_ico = gdi.Font("Segoe MDL2 Assets", 15);

	var ico_name = ["prev", "pause", "play", "next", "volume", "shuffle", "repeat", "repeat1", "normal"],
        ico_code = ["\uE100", "\uE103", "\uE102", "\uE101", "\uE15D" , "\uE14B", "\uE149", "\uE1CC", "\uE8AB"];

    w = 40;
    for (var i = 0; i < ico_name.length; i++) {
        img = gdi.CreateImage(w, w);
        g  = img.GetGraphics();

        g.SetTextRenderingHint(3);
		g.DrawString(ico_code[i], font_ico, color_txt, 0, 0, w, w, sf);
		g.DrawString(ico_code[i], font_ico, color_txt, 0+0.0, 0, w, w, sf);
        g.SetTextRenderingHint(0);
        img.ReleaseGraphics(g);
        images[ico_name[i]] = img;
    }

    w = 16;
    images.nob = gdi.CreateImage(w, w);
    g = images.nob.GetGraphics();
    g.SetSmoothingMode(2);
	g.FillEllipse(1, 1, w-3, w-3, color_txt);
    g.FillEllipse(3, 3, w-7, w-7, color_bg);
    g.SetSmoothingMode(0);
    images.nob.ReleaseGraphics(g);

    w = 40;
    images.pbo_bg = gdi.CreateImage(w, w);
    //var font_bg = gdi.Font(font_ico.Name, 36);
    g = images.pbo_bg.GetGraphics();
    g.SetSmoothingMode(4);
    g.FillEllipse(1, 1, w-4, w-4, color_txt & 0x40ffffff);
    g.SetSmoothingMode(0);
    //g.SetTextRenderingHint(4);
    //g.DrawString("\uE91F", font_bg, color_txt & 0x40ffffff, 0, 0, w, w, StringFormat(1, 1));
    //g.SetTextRenderingHint(0);
    images.pbo_bg.ReleaseGraphics(g);

    font_ico.Dispose();
    //font_bg.Dispose();

}



function get_fonts() {
    font_time = gdi.Font(font_name, 14);
    font_cover = gdi.Font("segoe mdl2 assets", 32);
    font_alb = gdi.Font(font_name, 12);
    font_title = gdi.Font(font_name, 14);
}


function check_mode() {
    switch (true) {
        case (ww < 510):
            ww_mode = 0;
            break;
        case (ww < 930):
            ww_mode = 1;
            break;
        default:
            ww_mode = 2;
            break;
    }
}


function on_size() {
    if (auto_mode) 
        check_mode();
    window.MaxHeight = window.MinHeight = get_panel_height();
    ww = Math.max(320, window.Width);
    wh = window.Height;
    //adjust_height();
}

function get_pbo_image(order) {
    var img;
    switch (order) {
        case 0:
            img = images.normal;
            break;
        case 1:
            img = images.repeat;
            break;
        case 2:
            img = images.repeat1;
            break;
        case 3:
        default:
            img = images.shuffle;
            break;
    }
    return img;
}

function on_paint(gr) {

    // bg
    gr.FillSolidRect(0, 0, ww, wh, color_bg);

    //var color_txt2 = blendColors(color_txt, color_bg, 0.3);



    // Buttons
    var pad = 10,
        bt_w = images.prev.Width,
        bt_x, bt_y;
    var bt_imgs = [ images.prev, fb.IsPlaying && !fb.IsPaused ? images.pause : images.play,
        images.next, get_pbo_image(fb.PlaybackOrder), images.volume];

    bt_x = (ww_mode == 0) ? Math.round((ww - bt_w * 5 - pad * 4) / 2) : bt_x = ww - bt_w * 5 - pad * 5;
    bt_y = (ww_mode < 2) ? Math.round((wh + 22 -bt_w) / 2) : Math.round((wh - bt_w) / 2);

    // DRAW
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].draw(gr, bt_imgs[i], bt_x, bt_y, bt_w, bt_w);
        bt_x += (bt_w + pad);
    }
    // DRAW PBO BG
    if (fb.PlaybackOrder > 0) {
        var b = buttons[3];
        var img = images.pbo_bg;
        gr.DrawImage(img, b.x, b.y, b.w, b.h, 0, 0, img.Width, img.Height, 0, 255);
    }

    // Cover & Info
    cover.vis = (ww_mode > 0);
    if (cover.vis && fb.IsPlaying) {
        cover.x = 10;
        var alb_w, alb_x, alb_y;
        if (ww_mode < 2) {
            cover.y = 35;
            cover.w = cover.h = wh - cover.y - 10;
            alb_w = buttons[0].x - cover.x - cover.w - 30;
        } else {
            cover.y = 10;
            cover.w = cover.h = wh - 20;
            alb_w = Math.min(200, buttons[0].x - cover.x - cover.w - 30);
        }

        if (cover.img) {
            gr.DrawImage(cover.img, cover.x, cover.y, cover.w, cover.h, 0, 0, cover.img.Width, cover.img.Height, 0, 255);
        } else {
            gr.SetTextRenderingHint(3);
            gr.DrawString("\uE958", font_cover, color_txt2, cover.x, cover.y, cover.w, cover.h, StringFormat(1, 1));
            gr.SetTextRenderingHint(0);
        }

        // INFO
        if (alb_w > 100) {
            alb_x = cover.x + cover.w + 10;
            var alb_y = cover.y + (cover.h - font_title.Height - font_alb.Height - 2) / 2 | 0;
            gr.GdiDrawText(title_str, font_title, color_txt, alb_x, alb_y, alb_w, font_title.Height, DT_LC);
            gr.GdiDrawText(alb_str, font_alb, color_txt2, alb_x, alb_y+font_title.Height+2, alb_w, font_alb.Height, DT_LC);
        }
    }

    // Time & Seek
    if (fb.IsPlaying) {
        var time_w1 = gr.CalcTextWidth(pb_time, font_time)+1, 
            time_w2 = gr.CalcTextWidth(pb_length, font_time)+1;
        if (ww_mode < 2) {
            gr.GdiDrawText(pb_time, font_time, color_txt, 15, 7, time_w1, 20, DT_CC);
            gr.GdiDrawText(pb_length, font_time, color_txt, ww-time_w2-15, 7, time_w2, 20, DT_CC);
            sk.draw(gr, 20+time_w1+20, 7, ww-time_w2-time_w1-20*2-20*2, 20, 9, color_txt, color_txt & 0x50ffffff);
        } else {
            if (buttons[0].x-20-time_w2-20-cover.w-240-time_w1-20 > 120) {
                gr.GdiDrawText(pb_time, font_time, color_txt, cover.w+20+200+20, (wh-20)/2, time_w1, 20, DT_CC);
                gr.GdiDrawText(pb_length, font_time, color_txt, buttons[0].x-20-time_w2, (wh-20)/2, time_w2, 20,  DT_CC);
                sk.draw(gr, cover.w+240+time_w1+20, (wh-20)/2, buttons[0].x-20-time_w2-20-cover.w-240-time_w1-20, 20, 9, color_txt, color_txt & 0x50ffffff);
            }
        }
    }


    if (volpanel.vis) {
        var b = buttons[4];
        if (ww_mode < 2) {
            volpanel.x = b.x + b.w/2 - volpanel.w/2;
            if (volpanel.x + volpanel.w + 2 > ww) 
                volpanel.x = ww - 2 - volpanel.w;
            volpanel.y = 2;
            volpanel.h = 30;
        } else {
            volpanel.x = b.x - volpanel.w - pad;
            volpanel.y = (wh - volpanel.h) /2;
            volpanel.h = 40;
        }
        gr.FillSolidRect(volpanel.x-2, volpanel.y-2, volpanel.w+4, volpanel.h+4, color_bg);
        gr.FillSolidRect(volpanel.x, volpanel.y, volpanel.w, volpanel.h, color_txt);
        gr.GdiDrawText(Math.round(fb.Volume+100), font_time, color_bg, volpanel.x, volpanel.y, 40, volpanel.h, DT_CC);
        vol.draw(gr, volpanel.x+40, volpanel.y+(volpanel.h-20)/2, volpanel.w-40-15, 20, 9, color_bg, color_bg & 0x50ffffff);
    }

}

function on_metadb_changed (handlelist, fromhook) {
    var metadb;

    metadb = fb.IsPlaying ? fb.GetNowPlaying() : null;
    if (metadb) {
        utils.GetAlbumArtAsync(window.ID, metadb, AlbumArtId.front);
        alb_str = tf_alb.EvalWithMetadb(metadb);
        title_str = tf_title.EvalWithMetadb(metadb);
    } else {
        cover.img = null;
        alb_str = "";
        title_str = "";
    }
    repaint();
}

function on_playback_new_track(metadb) {
    pb_time = "0:00";
    pb_length = tf_len.EvalWithMetadb(metadb);
    sk.update();
    on_metadb_changed();
}

function on_playback_seek(time) {
    on_playback_time(time);
}

function on_playback_time(time) {
    pb_time = utils.FormatDuration(time);
    sk.update();
}

function on_playback_pause(state) {
    repaint();
}

function on_playback_stop(reason) {
    if (reason != 2) {
        pb_time = "-:--";
        pb_length = "-:--";
        sk.update();
        on_metadb_changed();
    }
}

function on_get_album_art_done(metadb, art_id, image, image_path) {
    cover.img = image;
    if (cover.img) {
        cover.img = cover.img.Resize(40, 40);
        var objcolor = get_colorsheme_from_image(image);
        color_txt = objcolor.text;
        color_bg = objcolor.background;
        color_txt2 = objcolor.text2;
    } else {
        color_bg = eval(window.GetProperty("Color bg", "RGB(25, 25, 25)"));
        color_txt = eval(window.GetProperty("Color txt", "RGB(236, 236, 236)"));
        color_txt2 = blendColors(color_txt, color_bg, 0.3);
    }
    refresh_colors();
    repaint();
}

function on_playback_order_changed(new_order) {
    if (new_order > 2 && new_order != shuffle_type) {
        fb.PlaybackOrder = shuffle_type;
        return;
    }
    window.Repaint();
}

function on_volume_change(val) {
    vol.update();
}

function on_mouse_wheel(step) {
    if (volpanel.vis) {
        fb.Volume += step * Math.exp(-fb.Volume / 33.333);
    }
}

function on_mouse_move(x, y) {
    if (fb.IsPlaying) {
        sk.move(x, y);
        if (sk.is_drag)
            on_playback_time(fb.PlaybackTime);
    }
    vol.move(x, y);
    buttons.forEach(function (item) {
        item.move(x, y);
    });
}



function is_over_rect (x, y, x1, y1, w1, h1) {
    return (x > x1 && x < x1 + w1 && y > y1 && y < y1 + h1);
}

function on_mouse_lbtn_down(x, y, mask) {
    drag_window = true;
    var over_volpanel = volpanel.vis && is_over_rect(x, y, volpanel.x, volpanel.y, volpanel.w, volpanel.h);
    if (over_volpanel) {
        vol.down(x, y);
        drag_window = false;
    } else {
        if (fb.IsPlaying)
            sk.down(x, y);
        if (!buttons[4].is_mouse_over(x, y) && volpanel.vis)
            volpanel.vis = false;
        repaint();
        if (sk.is_drag || vol.is_drag) {
            drag_window = false;
        }
    }

    buttons.forEach(function (item) {
        if (!over_volpanel) {
            if (item.down(x, y)) {
                drag_window = false;
            };
            return true;
        }
    });

    if (drag_window) {
        utils.ReleaseCapture();
        fb_wnd.SendMsg(0xA1, 2, 0);
    }

}

function on_mouse_lbtn_up(x, y, mask) {
    var over_volpanel = volpanel.vis && is_over_rect(x, y, volpanel.x, volpanel.y, volpanel.w, volpanel.h);

    drag_window = false;
    sk.up(x, y);
    vol.up(x, y);
    buttons.forEach(function (item) {
        if (!over_volpanel && item.up(x, y)) {
            item.on_click(x, y);
            return true;
        }
    });
    if (double_clicked) {
        double_clicked = false;
    }
}

function on_mouse_rbtn_up(x, y, mask) {
    return (mask != MK_SHIFT);
}

function on_mouse_lbtn_dblclk(x, y, mask) {
    double_clicked = true;
    on_mouse_lbtn_down(x, y, mask);
}

function on_mouse_leave() {
    buttons.forEach(function (item) {
        item.leave();
    });
}



        


on_load();

function on_load() {
    check_prop();
    get_fonts();
    get_images();
    get_objects();

    if (fb.IsPlaying) {
        on_playback_new_track(fb.GetNowPlaying());
        on_playback_time(fb.PlaybackTime);
    }
    on_metadb_changed();
    on_playback_order_changed(fb.PlaybackOrder);

}



/*
var time111 = (new Date()).getTime(),
    time222 = time111,
    time333 = time111;
var time_dl;
var time_h = fb.CreateProfiler(),
    time_repaint = fb.CreateProfiler(),
    time200 = fb.CreateProfiler("aaaa"),
    time_s = fb.CreateProfiler();
    */

function get_panel_height() {
    var panel_height;
    switch (ww_mode) {
        case 0:
            panel_height = 80;
            break;
        case 1:
            panel_height = 90;
            break;
        case 2:
        default:
            panel_height = 65;
            break;
    }
    return panel_height;
}

/*
window.SetInterval(function () {
    on_timer_(0);
}, 30);


function on_timer_(g_timer333) {
    var repaint_1 = false,
        repaint_2 = false;
    time_dl = time_s.Time;
    time_s.Reset();

    var d = new Date();
    if (d.getTime() - time222 < 29)
        return;
    else
        time222 = d.getTime();

    if (repaint_main1 == repaint_main2) {
        repaint_main2 = !repaint_main1;
        repaint_1 = true;
    }

}
*/


function refresh_colors() {
    get_images();
    get_objects();
}

/*

window.SetTimeout(function () {

    var Time = fb.CreateProfiler();

    var scheme_img = gdi.Image("D:\\image.jpg");
    var obj_color = get_colorsheme_from_image(scheme_img);
    color_txt = obj_color.background;
    color_bg = obj_color.text;
    get_images();
    get_objects();
    window.Repaint();
    fb.trace("Time: " + Time.Time);
}, 1000);
*/


function get_colorsheme_from_image(img) {

    img = img.Resize(10, 10, 5);
    var color_arr = [],
        Color = {};
    color_arr = img.GetColorScheme(img.Width * img.Height).toArray();
    var len = color_arr.length;

    for (var i = 0; i < len; i++)
        color_arr[i] = toRGB(color_arr[i]);

    Color.background = dominantColor(color_arr, .1);
    var hol = inverseColors(Color.background, color_arr);

    var coltxt1 = colorDistance(Color.background, hol[0]),
        coltxt2 = colorDistance(Color.background, hol[1]),
        coltxtA = [coltxt1, coltxt2].sort();

    if (Luminance(Color.background) > 0.6) {
        Color.background_invert = RGB(35, 35, 35);
    } else {
        Color.background_invert = RGB(235, 235, 235);
    }

    if (coltxtA[0] == coltxt2) {
        Color.text = eval("RGB(" + hol[0] + ")");
        Color.text2 = eval("RGB("  + hol[1] + ")");
        Color.text_selection = (Luminance(Color.background) > 0.6) ? RGB(235, 235, 235) : RGB(10, 10, 10);
    } else {
        Color.text = eval("RGB(" + hol[1] + ")");
        Color.text2 = eval("RGB("  + hol[0] + ")");
        Color.text_selection = (Luminance(Color.background) > 0.6) ? RGB(235, 235, 235) : RGB(10, 10, 10);
    }
    Color.background = eval("RGB(" + Color.background + ")");

    try {
        img.Dispose();
    } catch (e) {};

    return Color;

}


function sqrt(n) {
	return Math.sqrt(n);
};

function pow(n) {
	return Math.pow(n, 2);
};

function rgbToYuv(rgb) {
	return [rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114, rgb[0] * -0.147 + rgb[1] * 0.289 + rgb[2] * 0.436, rgb[0] * 0.615 + rgb[1] * 0.515 + rgb[2] * 0.100];
};

function colorDistance(rgb1, rgb2) {
	var yuv1 = rgbToYuv(rgb1),
	yuv2 = rgbToYuv(rgb2);
	return sqrt(pow(yuv1[0] - yuv2[0])
		 + pow(yuv1[1] - yuv2[1])
		 + pow(yuv1[2] - yuv2[2]));
};

function gatherSimilarElements(list, comparator) {

	var subsets = [];

	for (var u = 0, U = list.length; u < U; ++u) {

		var element = list[u];
		var closest = null;

		for (var v = 0, V = subsets.length; v < V; ++v)
			if (comparator(subsets[v][0], element))
				break;

		if (v === V) {
			closest = [];
			subsets.push(closest);
		} else {
			closest = subsets[v];
		}

		closest.push(element);

	}

	return subsets;

};

function meanColor(colorList) {

	var finalColor = [0, 0, 0];

	for (var t = 0, T = colorList.length; t < T; ++t) {

		var color = colorList[t];

		finalColor[0] += color[0];
		finalColor[1] += color[1];
		finalColor[2] += color[2];

	}

	finalColor[0] /= colorList.length;
	finalColor[1] /= colorList.length;
	finalColor[2] /= colorList.length;

	return finalColor;

};

function dominantColor(colorList, treshold) {

	if (typeof treshold === 'undefined')
		treshold = 0.1;

	var buckets = gatherSimilarElements(colorList, function (colorA, colorB) {
			return colorDistance(colorA, colorB) < treshold;
		}).sort(function (bucketA, bucketB) {
			return bucketB.length - bucketA.length;
		});

	var color = meanColor(buckets.shift());
	return color;

};

function getContrastYIQ(color) {
	var r = color[0],
	g = color[1],
	b = color[2];

	var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;

	// return (yiq >= 128) ? 'light' : 'dark';
	return yiq;
};

function getDefaultColor(yiq) {
	return (yiq >= 128) ? [0, 0, 0] : [235, 235, 235];
};

function inverseColors(color, palette) {

	var yiq = getContrastYIQ(color);
	var colors = [],
	primaryColor,
	secondaryColor;

	for (var i = 0; i < palette.length; i++) {

		if (Math.abs(getContrastYIQ(palette[i]) - yiq) > 80) {
			colors.push(palette[i]);
		}
	}

	primaryColor = colors[0] ? colors[0] : getDefaultColor(yiq);
	secondaryColor = colors[1] ? colors[1] : getDefaultColor(yiq);

	return [primaryColor, secondaryColor];
};
