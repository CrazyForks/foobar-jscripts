// vim: ft=javascript fileencoding=utf-8 bomb et:

// ==PREPROCESSOR==
// @author "Elia >>> http://elia-is-me.github.io"
// ==/PREPROCESSOR==
//
// demo of button animations

function isFunction (obj) {
    return Object.prototype.toString.call(obj) == "[object Function]";
}

function setAlpha(color, a) {
    return ((color & 0x00ffffff) | (a << 24));
}


function Animation (itv) {
    this.timer = null;
    this.interval = itv;
}

Animation.prototype = {
    _clearTimer: function() {
        if (this.timer) {
            window.ClearInterval(this.timer);
            this.timer = null;
        }
    },
    Alpha: function (obj, from, to, client, itv, func) {
        this._clearTimer();
        obj.alpha = from;
        var alphaStep = Math.floor((to - from) / itv);
        var _this = this;
        this.timer = window.SetInterval(function () {
            obj.alpha += alphaStep;
            if (obj.alpha <= 0 || obj.alpha >= 255 ||
                to > from && obj.alpha >= to ||
                to < from && obj.alpha <= to) {
                obj.alpha = to;
                _this._clearTimer();
                window.Repaint();
                if (isFunction(func)) {
                    func();
                };
                return;
            }
            window.Repaint();
        }, this.interval);
    },
    Alpha2: function (obj, from, to, client, itv, func) {
        this._clearTimer();
        var _this = this;
        var startTime = +new Date;
        this.timer = window.SetInterval(function() {
            var p = (new Date - startTime) / (itv * _this.interval); // process
            obj.alpha = Math.ceil((to - from) * p + from);
            if (obj.alpha <= 0 ||
                obj.alpha >= 255 ||
                to > from && obj.alpha >= to ||
                to < from && obj.alpha <= to
                )
            {
                obj.alpha = to;
                _this._clearTimer();
                fb.trace("total time: " + (new Date - startTime).toString());
                window.Repaint();
                if (isFunction(func))
                    func();
                return;
            }
            window.Repaint();
        }, this.interval);
    },
    Start: function(obj, from ,to, duration, func) {
        this._clearTimer();
        var self = this;
        var startTime = +new Date;
        var process = function(p) {
            obj.alpha = Math.ceil((to - from) * p + from);
            window.Repaint();
        };
        this.timer = window.SetInterval(function() {
            var p = (new Date - startTime) / duration;
            if (p < 1.0) {
                process(p);
            } else {
                self._clearTimer();
                process(1.0);
                isFunction(func) && func();
            }
        }, this.interval);

    },
    Start2: function(duration, process, easing, func) {
        this._clearTimer();
        var self = this;
        var startTime = +new Date;
        easing = easing || function(p) { return p };
        this.timer = window.SetInterval(function() {
            var p = (new Date - startTime) / duration;
            if (p < 1.0) {
                process(easing(p));
            } else {
                self._clearTimer();
                process(easing(1.0));
                isFunction(func) && func();
                fb.trace("total time: " + (new Date - startTime).toString());
            }
        }, this.interval);
    },


}


function Button(w, h, func, tiptext) {
    this.w = w;
    this.h = h;
    this.tiptext = tiptext;
    this.state = 0;
    this.animation = new Animation(10);
    this.alpha = 0;
    this.func = func;
    this.y = 20;
    this.x = 10;
}
Button.prototype = {
    isMouseOver: function(x, y) {
        return x > this.x && x < this.x + this.w && y > this.y && y < this.y + this.h;
    },
    draw: function(gr, x, y) {
        //this.x = x;
        //this.y = y;
        if (this.alpha > 0) {
            gr.FillSolidRect(this.x, this.y, this.w, this.h, setAlpha(0xff000000, this.alpha));
        }
        if (this.alpha < 255) {
            gr.FillSolidRect(this.x, this.y, this.w, this.h, setAlpha(0xff00ff00, 255 - this.alpha));
        }
    },
    changeState: function (s) {
        if (s == this.state) return;
        var self = this;
        this.state = s;
        if (s == 0) {
            //this.animation.Alpha2(this, this.alpha, 0, window, 10);
            //this.animation.Start(this, this.alpha, 0, 300 );
            this.y = 20;
            this.animation.Start2(300, function(p) {
                //self.alpha += (0 - self.alpha) * p;
                self.y += 2 * wh * p / 50;
                window.Repaint();
            }, Easing.easeIn);
            //Tooltip.Deactivate();
        } else if (s == 1) {
            //this.animation.Alpha2(this, this.alpha, 128, window, 10, function() {
            //});
            //this.animation.Start(this, this.alpha, 128, 220);
            this.animation.Start2(300, function(p) {
                self.alpha += (128 - self.alpha) * p;
                window.Repaint();
            }, Easing.linear);
            //Tooltip.Text = this.tiptext;
            //Tooltip.Activate();
        } else {
            //this.animation.Alpha2(this, this.alpha, 255, window, 10);
            //this.animation.Start(this, this.alpha, 255, 100);
            //Tooltip.Deacivate();
            this.animation.Start2(300, function(p) {
                self.alpha += (255 - self.alpha) * p;
                window.Repaint();
            }, Easing.easeOut);
                
        }

    },
    // mouse events
    down: function(x, y) {
        if (this.isMouseOver(x, y)) {
            this.changeState(2);
            return true;
        } else {
            this.changeState(0);
            return false;
        }
    },
    up: function(x, y) {
        if (this.isMouseOver(x, y)) {
            this.changeState(1);
            return true;
        } else {
            this.changeState(0);
            return false;
        }
    },
    move: function(x, y) {
        if (this.state == 2) {
            return;
        } else {
            if (this.isMouseOver(x, y)) {
                this.changeState(1);
            } else {
                this.changeState(0);
            }
        }
    },
    leave: function() {
        this.changeState(0);
    }
}
          
var ww = 0, wh = 0;
var Tooltip = window.CreateTooltip();	
var b1 = new Button(50, 50, function() {}, "");


Easing = {
        // 匀速运动
        linear: function (t) {
            return t;
        },

        easeIn: function (t) {
            return t * t;
        },

        easeOut: function (t) {
            return (2 - t) * t;
        },

        easeBoth: function (t) {
            return (t *= 2) < 1 ? .5 * t * t : .5 * (1 - (--t) * (t - 2));
        },

        easeInStrong: function (t) {
            return t * t * t * t;
        },

        easeOutStrong: function (t) {
            return 1 - (--t) * t * t * t;
        },

        easeBothStrong: function (t) {
            return (t *= 2) < 1 ? .5 * t * t * t * t : .5 * (2 - (t -= 2) * t * t * t);
        },

        easeOutQuart: function (t) {
            return -(pow((t - 1), 4) - 1)
        }
}

function on_size() {
    ww = window.Width;
    wh = window.Height;
}

function on_paint(gr) {
    b1.draw(gr, 10, 20);
}
function on_mouse_move(x, y) {
    b1.move(x, y);
}

function on_mouse_lbtn_down(x, y) {
    b1.down(x, y);
}

function on_mouse_lbtn_up(x, y) {
    b1.up(x, y);
}

function on_mouse_leave() {
    b1.leave();
}

