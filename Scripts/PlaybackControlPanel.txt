// vim: set ft=javascript fileencoding=utf-8 bomb et:

/* global gdi utils fb ActiveXObject */
/* eslint-disable no-mixed-operators */

// Required:
// * foobar2000 v1.3.3+
// * WSH Panel Mod Plus v1.5.7+
//
// Installation:
// * Import/paste the whole file content to wshmp's editor or
// * Use `PREPROCESSOR' to @import file like below.
//
// ==PREPROCESSOR==
// @author "lenka"
// @import "path\to\script.js"
// ==/PREPROCESSOR==

// TODO list:
//
// * Download albumArt from internet.
// * Use dark text color if blurred bg image color is too bright.

// Reserved

var shuffleType = window.GetProperty('shuffleType', 4);
var debug = window.GetProperty('debug mode', false);

// var SCRIPT_NAME = 'Playback Control Panel'
// TFs
// tf objects is recommended to be cached before use.
var tf_length = fb.TitleFormat('[%length%]');
// Image.resize
var IMG_ADAPT = 0; // 适应
var IMG_CROP = 1; // 修剪
var IMG_STRETCH = 2; // 拉伸
var IMG_FILL = 3; // 填充
// gr.gdiDrawText
// => CALCRECT | END_ELLIPSIS | NO_PREFIX
var DT_LT = 0x00000400 | 0x00008000 | 0x00000800;

// mask key
var MK_SHIFT = 4;

var REFRESH_INTERVAL = 15;

var Image, Images, Seek, Volume, Wallpaper,
  AlbumArt;
var Buttons;
var ww = 0;
var wh = 0;

// Return a zoomed value, to adapt Windows zoom percent.
var sizeOf = (function () {
  var objShell, tmp, factor;

  objShell = new ActiveXObject('WScript.Shell');
  tmp = objShell.RegRead('HKEY_CURRENT_USER\\Control Panel\\Desktop\\WindowMetrics\\AppliedDPI');
  factor = Math.round(tmp / 96 * 100) / 100;
  return function (value) {
    return Math.round(value * factor);
  };
}());

// helpers: // tool function ==================================================

var repaintAll = throttle(function () {
  window.Repaint();
}, REFRESH_INTERVAL);

var console = {
  log: function (str) {
    debug && fb.trace(str);
  }
};


// Refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
function isArray (arg) {
  return Object.prototype.toString.call(arg) === '[object Array]';
}

// jQuery.isNumeric()
function isNumeric (obj) {
  return !isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
}

/*
function isFunction (obj) {
  return Object.prototype.toString.call(obj) === '[object Function]';
}
*/

// Used in gdi.DrawString, set string alignment and etc.
function StringFormat () {
  var ref = [0, 0, 0, 0];
  var len = arguments.length;
  var i;

  // ref.length == 4
  for (i = 0; i < len && i < 4; i++) {
    if (ref[i] != null) {
      ref[i] = arguments[i];
    }
  }

  return ((ref[0] << 28) | (ref[1] << 24) | (ref[2] << 20) | ref[3]);
}

// color related

function rgba (r, g, b, a) {
  return ((a << 24) | (r << 16) | (g << 8) | (b));
}

function rgb (r, g, b) {
  return (0xff000000 | (r << 16) | (g << 8) | (b));
}

function setAlpha (color, a) {
  return ((color & 0x00ffffff) | (a << 24));
}

function pos2vol (pos) {
  return (50 * Math.log(0.99 * pos + 0.01) / Math.LN10);
}

function vol2pos (v) {
  return ((Math.pow(10, v / 50) - 0.01) / 0.99);
}

function debounce (fn, delay) {
  var timer = null,
    delay = delay || 250;
  return function () {
    var context = this,
      args = arguments;
    timer && window.ClearTimeout(timer);
    timer = window.SetTimeout(function () {
      fn.apply(context, args);
    }, delay);
  };
}

function throttle (fn, threshhold, scope) {
  threshhold || (threshhold = 250);
  var last,
    deferTimer;
  return function () {
    var context = scope || this;

    var now = +new Date(),
      args = arguments;
    if (last && now < last + threshhold) {
      // hold on to it
      window.clearTimeout(deferTimer);
      deferTimer = window.setTimeout(function () {
        last = now;
        fn.apply(context, args);
      }, threshhold);
    } else {
      last = now;
      fn.apply(context, args);
    }
  };
}

function inherit (subClass, superClass) {
  var F = function () {};
  F.prototype = superClass.prototype;
  subClass.prototype = new F();
  subClass.prototype.constructor = subClass;

  subClass.superclass = superClass.prototype;
  if (superClass.prototype.constructor == Object.prototype.constructor) {
    superClass.prototype.constructor = superClass;
  }
}

// Color
// ------

function getColor () {
  var color = {};
  color.bg = eval(window.GetProperty('Color background', 'rgb(16, 16, 16)').toLowerCase());
  color.fg = eval(window.GetProperty('Color text', 'rgb(235, 235, 235)').toLowerCase());

  return color;
}

var Color = getColor();

// Font
// -------

function getFonts () {
  var fontName = 'segoe ui semibold'; // semibold"
  var fontAssets = 'segoe mdl2 assets';
  var fontFallback = [fontName, 'tahoma'];
  var font = {};

  // Check if font (for text display) is installed.
  for (var i = 0, len = fontFallback.length; i < len; i++) {
    if (utils.CheckFont(fontFallback[i])) {
      font.Name = fontFallback[i];
      break;
    } else {
      fb.trace('Warning: ' + fontFallback[i] + ' is not installed');
    }
  }

  if (!utils.CheckFont(fontAssets)) {
    fb.trace('Warning: ' + fontAssets + ' is not installed');
  }

  font.time = font.small = font.title = gdi.Font(font.Name, sizeOf(12));
  font.Name = font.title.Name;
  font.AssetsName = fontAssets;

  return font;
}

var Font = getFonts();

// Create image resources.
// -----------------------

function getImages (_font, _color) {
  var g;
  var btnW, nobW, coverW;
  var sf = StringFormat(1, 1);
  var images = {};

  // Convert icon char to image.
  function getImg (code, font, color, w, h) {
    var img = gdi.CreateImage(w, h);
    var gb = img.GetGraphics();
    var sf = StringFormat(1, 1);
    gb.SetTextRenderingHint(3);
    gb.DrawString(code, font, color, 0, 0, w, h, sf);
    gb.DrawString(code, font, color, 0, 0, w, h, sf);
    gb.SetTextRenderingHint(0);
    img.ReleaseGraphics(gb);
    return img;
  }

  var icons = {
    'prev': '\ue100',
    'pause': '\ue103',
    'play': '\ue102',
    'next': '\ue101',
    'volume': '\ue15d',
    'shuffle': '\ue14b',
    'repeat': '\ue149',
    'repeat1': '\ue1cc',
    'normal': '\ue13c'
  };
  btnW = sizeOf(40);
  var fontAssets = gdi.Font(Font.AssetsName, sizeOf(18));
  for (var i in icons) {
    images[i] = getImg(icons[i], fontAssets, Color.fg, btnW, btnW);
  }

  var icons2 = {
    'volume0': '\ue992',
    'volume1': '\ue993',
    'volume2': '\ue994',
    'volume3': '\ue995'
  };
  btnW = sizeOf(60 - 12);
  for (var i in icons2) {
    images[i] = getImg(icons2[i], fontAssets, Color.fg, btnW, btnW);
  }

  // Nocover image
  fontAssets = gdi.Font(Font.AssetsName, sizeOf(40));
  coverW = sizeOf(85);

  images.nocover = gdi.CreateImage(coverW, coverW);
  g = images.nocover.GetGraphics();
  g.FillSolidRect(0, 0, coverW, coverW, setAlpha(Color.fg, 50));
  g.SetTextRenderingHint(4);
  g.DrawString('\ue958', fontAssets, setAlpha(Color.fg, 128), 0, 0, coverW, coverW, sf);
  g.SetTextRenderingHint(0);
  images.nocover.ReleaseGraphics(g);

  // Slider nob images
  nobW = sizeOf(16);
  images.nob = gdi.CreateImage(nobW, nobW);
  g = images.nob.GetGraphics();
  g.SetSmoothingMode(2);
  g.FillEllipse(sizeOf(3), sizeOf(3), nobW - sizeOf(6), nobW - sizeOf(6), Color.bg);
  g.DrawEllipse(sizeOf(2), sizeOf(2), nobW - sizeOf(4), nobW - sizeOf(4), sizeOf(2), Color.fg);
  g.SetSmoothingMode(0);
  images.nob.ReleaseGraphics(g);

  fontAssets.Dispose();

  return images;
}

var Images = getImages();

// Button && Buttons
// -----------------

function Button (img, func) {
  this.setImage(img);
  this.func = func;
  this.state = 0;
  this.visible = true;
  this.setXY(0, 0);
}

Button.prototype = {
  trace: function (x, y) {
    return x > this.x && x < this.x + this.w && y > this.y && y < this.y + this.h;
  },
  repaint: repaintAll,

  setXY: function (x, y) {
    this.x = x;
    this.y = y;
  },
  setImage: function (img) {
    this.img = img;
    try {
      this.w = img.width;
      this.h = img.height;
    } catch (e) {
      throw new Error('Error: Invalid button image. ' + e);
    }
  },
  setState: function (state) {
    if (state === this.state) return;
    this.state = state;
    this.repaint();
  },
  // Mouse events:
  down: function (x, y) {
    this.trace(x, y) ? this.setState(2) : null;
    return this.state === 2;
  },
  up: function (x, y) {
    if (!this.visible) return;
    var stateOld = this.state;
    this.trace(x, y) ? this.setState(1) : this.setState(0);
    if (stateOld == 2 && this.state == 1) {
      this.func && this.func(x, y);
      return true;
    }
    return false;
  },
  move: function (x, y) {
    if (this.state !== 2) {
      this.trace(x, y) ? this.setState(1) : this.setState(0);
    }
  },
  leave: function () {
    this.setState(0);
  // TODO:  Keep btn pressed down when menu pop up
  },
  // xx, yy: offset from this.x, this.y
  draw: function (gr, xx, yy) {
    if (!this.visible) return;
    var x = this.x;
    var y = this.y;
    if (arguments.length === 3) {
      x += xx;
      y += yy;
    }
    var alpha = (this.state == 2 ? 128 : this.state == 1 ? 200 : 255);
    var img = this.img;
    gr.DrawImage(img, x, y, img.Width, img.Height, 0, 0, img.Width, img.Height, 0, alpha);

    debug && gr.DrawRect(x, y, this.w - 1, this.h - 1, 1, 0x20ffffff);
  }

};
var BHandler;
var ButtonsHandler = function (btns) {
  this.btns = [];
  for (var key in btns) {
    this.btns.push(btns[key]);
  }
  this.length = this.btns.length;
  // this.btns = btns
  this.hbtn = this.dbtn = null;
};

ButtonsHandler.prototype.onMouseMove = function (x, y) {
  if (this.dbtn != null) {
    return;
  }
  if (this.hbtn && this.hbtn.trace(x, y)) {
    this.hbtn.setState(1);
    return;
  }

  var btn = null;
  var len, i;

  for (i = 0, len = this.btns.length; i < len; i++) {
    if (this.btns[i].trace(x, y)) {
      btn = this.btns[i];
      break;
    }
  }

  if (btn && this.hbtn !== btn) {
    this.hbtn && this.hbtn.setState(0);
    this.hbtn = btn;
    btn.setState(1);
  } else if (!btn && this.hbtn) {
    this.hbtn.setState(0);
    this.hbtn = null;
  }
};

ButtonsHandler.prototype.onMouseDown = function (x, y) {
  if (this.hbtn) {
    this.dbtn = this.hbtn;
    this.dbtn.setState(2);
    this.hbtn = null;
  }
};

ButtonsHandler.prototype.onMouseUp = function (x, y) {
  if (this.dbtn) {
    this.dbtn.trace(x, y) && this.dbtn.func && this.dbtn.func(x, y);
    this.dbtn.setState(0);
    this.dbtn = null;
  }
  this.onMouseMove(x, y);
};

ButtonsHandler.prototype.onMouseLeave = function () {
  if (!this.hbtn) return;
  this.hbtn.setState(0);
  this.hbtn = null;
};

ButtonsHandler.prototype.draw = function (gr) {
  for (var i = 0, len = this.length; i < len; i++) {
    this.btns[i].draw(gr);
  }
};

function getPlaybackOrderImage (order) {
  if (typeof order === 'undefined') {
    order = fb.PlaybackOrder;
  }
  var imgs = [
    Images.normal,
    Images.repeat,
    Images.repeat1,
    Images.shuffle
  ];
  return (order > 2 ? imgs[3] : imgs[order]);
}

function getPlayOrPauseImage () {
  var img;
  if (!fb.IsPlaying || (fb.IsPlaying && fb.IsPaused)) {
    img = Images.play;
  } else {
    img = Images.pause;
  }
  return img;
}

function getButtons () {
  var w = sizeOf(40);
  Buttons = {};

  // get buttons
  Buttons.prev = new Button(Images.prev, onPrev);
  Buttons.next = new Button(Images.next, onNext);
  Buttons.playOrPause = new Button(getPlayOrPauseImage(), onPlayOrPause);
  Buttons.order = new Button(getPlaybackOrderImage(), onPlaybackOrder);
  Buttons.volume = new Button(Images.volume, onVolume);

  // Handler
  BHandler = new ButtonsHandler(Buttons); 
  

  function onPrev () {
    fb.Prev();
  }

  function onNext () {
    fb.Next();
  }

  function onPlayOrPause () {
    fb.PlayOrPause();
  }

  function onVolume () {
    !Volume.visible ? Volume.show() : Volume.hide(true);
  }

  function onPlaybackOrder () {
    if (fb.PlaybackOrder < 2) {
      fb.PlaybackOrder += 1;
    } else if (fb.PlaybackOrder === 2) {
      fb.PlaybackOrder = shuffleType;
    } else {
      fb.PlaybackOrder = 0;
    }
  }
}

function adjustButtonsLayout () {
  var pad = 10,
    bw = Buttons.prev.w,
    bx, by;

  bx = ww - bw - pad;
  by = Math.round((wh - bw) / 2);

  Buttons.volume.visible = (ww > 460);
  Buttons.order.visible = (ww > 460 - 50);
  Buttons.prev.visible = (ww > 460 - 100);

  Buttons.volume.setXY(bx, by);
  //
  Buttons.volume.visible && (bx -= pad + bw);
  Buttons.order.setXY(bx, by);
  //
  Buttons.order.visible && (bx -= pad + bw);
  Buttons.next.setXY(bx, by);
  //
  bx -= pad + bw;
  Buttons.playOrPause.setXY(bx, by);
  //
  bx -= pad + bw;
  Buttons.prev.setXY(bx, by);
}

getButtons();

// AlbumArt obj ===================================================

var AlbumArtId = {
  front: 0,
  back: 1,
  disc: 2,
  icon: 3,
  artist: 4
};

AlbumArt = {
  timer: null,

  // Callback function recieve 3 params: metadb, art_id, image
  getAsync: function (metadb, artID, callback, options) {
    var embedded, force;
    if (options && typeof options === 'object') {
      embedded = options.embedded || false;
      force = options.force || false;
    }
    if (!metadb) {
      return null;
    }
    var img;
    window.SetTimeout(function () {
      if (embedded && metadb.Path.indexOf('://') == -1) {
        img = utils.GetAlbumArtEmbedded(metadb.RawPath, artID);
        if (!img && force) {
          for (var i in AlbumArtId) {
            if (AlbumArtId[i] == AlbumArtId.icon) continue; // do not load icon images
            img = utils.GetAlbumArtV2(metadb, AlbumArtId[i], false);
            if (img) break;
          }
        }
      } else {
        img = utils.GetAlbumArtV2(metadb, artID, false);
        // if force == true, try to search all type of album art before
        // got one.
        if (force && !img) {
          for (var i in AlbumArtId) {
            if (AlbumArtId[i] == artID) continue;
            if (AlbumArtId[i] == AlbumArtId.icon) continue; // do not load icon images
            img = utils.GetAlbumArtV2(metadb, AlbumArtId[i], false);
            if (img) break;
          }
        }
      }
      callback && callback(metadb, artID, img);
      return null;
    }, 15);
  },
  download: function () {
    // TODO
  }
};

// Image module to process images =============================================

Image = {
  loadAsync: function () {},

  clone: function (img) {
    if (!img) return null;
    return img.Clone(0, 0, img.Width, img.Height);
  },

  resize: function (img, w, h, aspect, interpolation) {
    if (!img) return null;

    var _w, _h;
    switch (aspect) {
      case IMG_ADAPT:
        var scale = 0;
        if (Math.max(img.Width, img.Height) < Math.min(w, h)) {
          scale = 1;
        } else {
          scale = Math.min(w / img.Width, h / img.Height);
        }
        _w = Math.floor(scale * img.Width);
        _h = Math.floor(scale * img.Height);
        break;

      case IMG_CROP:
        var scale = Math.max(w / img.Width, h / img.Height);
        _w = Math.ceil(scale * img.Width);
        _h = Math.ceil(scale * img.Height);

        if (_w > w) {
          var img_ = img.Resize(_w, _h, interpolation);
          var _x = Math.floor((_w - w) / 2);
          _w = w;
          img = img_.Clone(_x, 0, _w, _h);
        }
        if (_h > h) {
          var img_ = img.Resize(_w, _h, interpolation);
          var _y = Math.floor((_h - h) / 2);
          _h = h;
          img = img_.Clone(0, _y, _w, _h);
        }
        break;

      case IMG_STRETCH:
        _w = w;
        _h = h;
        break;

      case IMG_FILL:
        var scale = Math.max(w / img.Width, h / img.Height);

        _w = Math.ceil(scale * img.Width);
        _h = Math.ceil(scale * img.Height);
        break;
    }

    return img.Resize(_w, _h, interpolation);
  },

  isValid: function (img) {
    return (typeof img === 'object' && 'applyAlpha' in img);
  },

  applyShadow: function (image, w, h, interpolation, padding) {
    if (!this.isValid(image)) {
      return null;
    }
    var img = image.Resize(w, h, interpolation);
    var g = null;

    var shadow = gdi.createImage(w + 2 * padding, h + 2 * padding);
    g = shadow.GetGraphics();
    g.SetSmoothingMode(2);
    g.drawRoundRect(padding, padding, w, h, 2, 2, 2, 0xff000000);
    shadow.ReleaseGraphics(g);
    shadow.BoxBlur(1, 2);

    var ret = gdi.createImage(w + 2 * padding, h + 2 * padding);
    g = ret.GetGraphics();
    g.DrawImage(shadow, 0, 0, shadow.Width, shadow.Height, 0, 0, shadow.Width, shadow.Height, 0, 128);
    g.DrawImage(img, padding, padding, img.Width, img.Height, 0, 0, img.Width, img.Height, 0, 255);
    g.DrawRect(padding, padding, w, h, 1, setAlpha(0xff000000, 64));
    ret.ReleaseGraphics(g);

    img.Dispose();
    shadow.Dispose();

    return ret;
  }

};

// Slider class =====================================================
// progressbar, volumebar, etc.

function Slider (img, height, getpos, setpos) {
  this.img = img; // nob image
  this.height = height; // visual height
  this.visible = true;
  this.getpos = getpos || function () {};
  this.setpos = setpos || function () { return -1; };
  this.drag = false;

  this.pos = this.getpos();
  this.dragpos = 0;
  this.size(0, 0, 0, 0);
}

Slider.prototype = {
  trace: function (x, y) {
    var l = (this.img ? this.img.Width / 2 : 0);
    return (x > this.x - l && x < this.x + this.w + l && y > this.y && y < this.y + this.h);
  },
  repaint: function () {
    var l = (this.img ? this.img.Width / 2 : 0);
    window.RepaintRect(this.x - l, this.y, this.w + l * 2, this.h);
  },
  refresh: function () {
    this.pos = this.getpos();
    this.repaint();
  },
  draw: function (gr) {
    if (!this.visible) return;
    if (this.height > this.h) return;
    if (this.w <= 0) return;
    var yoff = Math.round((this.h - this.height) / 2),
      img_w, img_h, img_x, img_y;
    gr.FillSolidRect(this.x, this.y + yoff, this.w, this.height, setAlpha(Color.fg, 128));
    if (this.pos > 0 || this.pos <= 1) {
      gr.FillSolidRect(this.x, this.y + yoff, this.w * this.pos, this.height, Color.fg);
    }
    if (this.img && isNumeric(this.pos)) {
      img_w = this.img.Width;
      img_h = this.img.Height;
      img_x = this.x + this.w * (this.drag ? this.dragpos : this.pos) - img_w / 2;
      img_y = (this.h - img_h) / 2 + this.y;
      gr.DrawImage(this.img, img_x, img_y, img_w, img_h, 0, 0, this.img.Width, this.img.Height, 0, 255);
    }

    debug && gr.DrawRect(this.x, this.y, this.w - 1, this.h - 1, 1, 0x20ffffff);
  },
  size: function (x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    if (!this.visible) this.w = this.h = 0;
  },
  // Mouse events:
  move: function (x, y) {
    if (!this.visible) return;
    if (this.drag) {
      x -= this.x;
      this.dragpos = x < 0 ? 0 : x > this.w ? 1 : x / this.w;
      this.repaint();
    // this.setpos(this.pos)
    }
  },
  down: function (x, y) {
    if (this.trace(x, y)) {
      this.drag = true;
      this.move(x, y);
    }
  },
  up: function (x, y) {
    if (this.drag) {
      this.pos = this.dragpos;
      this.setpos(this.dragpos);
      this.drag = false;
      this.repaint();
    }
  }
};

// progressbar

function getSeek () {
  var onGet = function () {
    try {
      return fb.PlaybackTime / fb.PlaybackLength;
    } catch (e) {
      return 0;
    }
  };

  var onSet = function (pos) {
    try {
      fb.PlaybackTime = fb.PlaybackLength * pos;
    } catch (e) {}
  };

  Seek = new Slider(Images.nob, 2, onGet, onSet);
}

// Nowplaying info button ======================================================

function NowPlaying () {
  this.state = 0;
  this.func = null; // onClick function
  this.img = null; // displayed image of album art.
  this.imgcache = null; // raw image of album art.
  this.nocover = Images.nocover;
  this.visible = true;
  this.albumold = '#@!';

  // tf objects
  this.TF_TITLE = fb.TitleFormat('%title%');
  this.TF_ART = fb.TitleFormat('$if2([%artist%],' + 'Unknown Artist' + ')');
  this.TF_ART_ALB = fb.TitleFormat('%album artist%^^%album%');
}
inherit(NowPlaying, Button);
NowPlaying = new NowPlaying();

// Set NowPlaying on-click function
NowPlaying.func = function () {
  if (!fb.IsPlaying) return;

  fb.ActivePlaylist = fb.PlayingPlaylist;
  fb.RunMainMenuCommand('视图/显示列表正在播放项目');
  console.log('Track clicked');
};

NowPlaying.getAlbumArt = function (metadb) {
  var alb_str;
  var self = this;

  // callback
  this.onGetAlbumArt = function (metadb, artId, image) {
    // Cache image for other usage.
    self.imgcache = image;
    if (self.imgcache && self.h > 10) {
      // self.img = self.imgcache.Resize(self.h - 10, self.h - 10, 7)
      self.img = Image.resize(self.imgcache, self.h - 10, self.h - 10, IMG_CROP, 7);
    }
    // Gen nocover image, should be exec only once.
    if (!self.nocover || self.nocover.Width != self.h - 10) {
      self.nocover = Images.nocover.Resize(self.h - 10, self.h - 10, 7);
    }
    self.repaint();
    Wallpaper.update();
  };

  // get on album switch
  if (metadb) {
    alb_str = this.TF_ART_ALB.EvalWithMetadb(metadb);
    if (alb_str != this.albumold) {
      this.img = null;
      this.imgcache = null;
      AlbumArt.getAsync(metadb, AlbumArtId.front, this.onGetAlbumArt, { force: true });
      this.albumold = alb_str;
    }
  } else {
    this.imgcache = null;
    this.img = null;
  }

  CollectGarbage();
  this.repaint();
};

NowPlaying.draw = function (gr) {
  if (!fb.IsPlaying) return;
  if (this.h < wh) return;

  // album art image
  if (this.img) {
    gr.DrawImage(this.img, this.x + 5, this.y + 5, this.h - 10, this.h - 10, 0, 0, this.img.Width, this.img.Height, 0, 225);
  } else {
    this.nocover && gr.DrawImage(this.nocover, this.x + 5, this.y + 5, this.h - 10, this.h - 10, 0, 0, this.nocover.Width, this.nocover.Height, 0, 255);
  }

  // track info
  if (this.w > this.h + 50) {
    var infoX = this.x + this.h + 5;
    var infoY = this.y + this.h / 2 - Font.title.Height - 5;
    gr.GdiDrawText(this.TF_TITLE.Eval(), Font.title, Color.fg, infoX, infoY, this.x + this.w - infoX - 5, 30, DT_LT);
    infoY += Math.round(Font.title.Height * 1.25);
    gr.GdiDrawText(this.TF_ART.Eval(), Font.title, Color.fg, infoX, infoY, this.x + this.w - infoX - 5, 30, DT_LT);
  }

  // hover color
  var overlay = this.state == 1 ? setAlpha(0xffffffff, 10) : setAlpha(0xffffffff, 20);
  this.state && gr.FillSolidRect(this.x, this.y, this.w, this.h, overlay);

  debug && gr.DrawRect(this.x, this.y, this.w - 1, this.h - 1, 1, 0x20ffffff);
};

NowPlaying.size = function (x, y, w, h) {
  this.x = x;
  this.y = y;
  this.w = w;
  if (this.w <= h + 50) this.w = Math.min(w, h);
  this.h = Math.min(w, h);
  this.onSize && this.onSize();
};

NowPlaying.onSize = function () {};

// Volume ================================================

Volume = {
  w: 260,
  h: 60,
  visible: false,
  getVolImg: function () {
    var val = vol2pos(fb.Volume);
    var imgs = [Images.volume0, Images.volume1, Images.volume2, Images.volume3, Images.volume3];

    return imgs[Math.ceil(val / 0.3)];
  },

  getButton: function () {
    this.button = new Button(Volume.getVolImg(), Images.volume0.Width, Images.volume0.Height, function () { fb.VolumeMute(); });
  },

  setXY: function (x, y) {
    this.x = x;
    this.y = y;
  },

  trace: function (x, y) {
    return (x > this.x && x < this.x + this.w && y > this.y && y < this.y + this.h);
  },

  getImg: function () {
    var img, g;

    img = gdi.CreateImage(this.w, this.h);
    g = img.GetGraphics();
    g.FillSolidRect(0, 0, this.w - 1, this.h - 1, rgb(64, 64, 64));
    g.DrawRect(0, 0, this.w - 1, this.h - 1, 1, rgb(32, 32, 32));
    img.ReleaseGraphics(g);
    this.img = Image.applyShadow(img, this.w - 12, this.h - 12, 7, 6);
    img.Dispose();
  },

  hide: function (force) {
    var self = Volume;

    if (force) {
      self.visible = false;
      repaintAll();
      return;
    }

    this.timerId = window.setTimeout(function () {
      self.visible = false;
      repaintAll();
      self.timerId && window.ClearTimeout(self.timerId);
      self.timerId = null;
    }, 3000);
  },

  show: function () {
    if (this.visible) {
      this.timerId && window.ClearTimeout(this.timerId);
      this.timerId = null;
    }

    this.visible = true;
    if (!Image.isValid(this.img)) {
      this.getImg();
    }

    this.onSize();
    repaintAll();
    this.hide();
  },

  draw: function (gr) {
    if (!this.visible) return;

    gr.DrawImage(this.img, this.x, this.y, this.w, this.h, 0, 0, this.img.Width, this.img.Height, 0, 255);
    this.button.setImage(this.getVolImg());
    this.button.draw(gr);
    // draw slider
    this.slider.draw(gr);
  },

  onSize: function () {
    this.setXY((ww - this.w) / 2, (wh - this.h) / 2);
    // draw button
    if (!this.button) this.getButton();
    this.button.setXY(Math.round(this.x + 6), Math.round(this.y + 6));
    if (!this.slider) this.getSlider();
    this.slider.visible = this.visible;
    this.slider.size(this.button.x + this.button.w + 10, this.y + (this.h - 20) / 2, this.w - this.button.w - 40, 20);
  },

  getSlider: function () {
    function getpos () {
      return vol2pos(fb.Volume);
    }

    function setpos (pos) {
      fb.Volume = pos2vol(pos);
    }

    this.slider = new Slider(Images.nob, 2, getpos, setpos);
  },

  move: function (x, y) {
    if (!this.visible) return;

    this.trace(x, y) && this.show();
    this.button.move(x, y);
    this.slider.move(x, y);
  },
  down: function (x, y) {
    if (!this.visible) return;

    this.trace(x, y) && this.show();
    this.button.down(x, y);
    this.slider.down(x, y);
  },
  up: function (x, y) {
    if (!this.visible) return;

    this.trace(x, y) && this.show();
    this.button.up(x, y);
    this.slider.up(x, y);
  },
  leave: function () {
    if (!this.visible) return;

    this.button.leave();
  }

};

// Wallpaper ============================================================

Wallpaper = {
  src: null,
  cache: null,
  timer: null,
  show: window.GetProperty('Wallpaper display', true),
  blur: window.GetProperty('Wallpaper blurred', true),
  // StackBlur param, (0 - 255).
  blurVal: window.GetProperty('Wallpaper blurred value', 45),
  alpha: window.GetProperty('Wallpaper alpha', 150),

  getImg: function (img) {
    if (!img) {
      return null;
    }
    img = Image.resize(img, ww, wh, IMG_FILL);
    if (this.blurVal < 0 || this.blurVal > 255) {
      this.blurVal = 45;
      window.SetProperty('Wallpaper blurred value', this.blurVal);
    }
    if (this.blur && this.blurVal > 0) {
      img.StackBlur(this.blurVal, 2);
    }
    var cutX = Math.round((img.Width - ww) / 2);
    try {
      return img.Clone(cutX, img.Height - wh - 5, ww, wh);
    } catch (e) {
      return null;
    }
  },

  update: function () {
    if (!this.show) return;
    this.cache = this.src;
    this.src = NowPlaying.imgcache ? this.getImg(NowPlaying.imgcache) : null;
    var alpha = 0;
    repaintAll();
  },

  onSize: debounce(function () {
    Wallpaper.update();
  }),

  draw: function (gr) {
    if (fb.IsPlaying && this.src && this.show) {
      gr.DrawImage(this.src, 0, 0, ww, wh, 0, 0, this.src.Width, this.src.Height, 0, 255);
      gr.FillSolidRect(0, 0, ww, wh, setAlpha(Color.bg, this.alpha));
    } else {
      gr.FillSolidRect(0, 0, ww, wh, Color.bg);
    }
  }

};

// on load =====================================================

// Init obj
getButtons();
getSeek();

if (fb.IsPlaying) {
  on_playback_new_track(fb.GetNowPlaying());
  on_playback_time(fb.PlaybackTime);
}

on_metadb_changed();
on_playback_order_changed(fb.PlaybackOrder);
window.MaxHeight = window.MinHeight = sizeOf(55);

// callback functions ===============================================

function on_size () {
  ww = window.Width;
  wh = window.Height;
  if (!ww || !wh) return;

  Wallpaper.onSize();

  adjustButtonsLayout();

  var npw = Math.min(240, (Buttons.prev.visible ? Buttons.prev.x : Buttons.playOrPause.x) - 10);
  NowPlaying.size(0, 0, npw, wh);

  Seek.visible = (Buttons.prev.x - NowPlaying.x - NowPlaying.w > 200);
  Seek.size(NowPlaying.x + NowPlaying.w + 20, (wh - 20) / 2 - 10, Buttons.prev.x - NowPlaying.x - NowPlaying.w - 50, 20);

  Volume.onSize();
}

function on_paint (gr) {
  Wallpaper.draw(gr);

  Buttons.order.setImage(getPlaybackOrderImage());
  Buttons.playOrPause.setImage(getPlayOrPauseImage());
  BHandler.draw(gr);

  NowPlaying.draw(gr);

  if (Seek.visible && fb.IsPlaying) {
    Seek.draw(gr);
    var time_w = gr.CalcTextWidth(Seek.playbackTime, Font.time);
    var len_w = gr.CalcTextWidth(Seek.playbackLength, Font.time);
    gr.GdiDrawText(Seek.playbackTime, Font.time, Color.fg, Seek.x, (wh - 20) / 2 + 10, time_w, 20, 0);
    gr.GdiDrawText(Seek.playbackLength, Font.time, Color.fg, Seek.x + Seek.w - len_w, (wh - 20) / 2 + 10, len_w, 20, 0);
  }

  Volume.draw(gr);
}

function on_mouse_move (x, y) {
  BHandler.onMouseMove(x, y);

  NowPlaying.move(x, y);

  Seek.move(x, y);

  Volume.move(x, y);
}

function on_mouse_lbtn_down (x, y, mask) {
  if (Volume.visible && Volume.trace(x, y)) {
    Volume.down(x, y);
    return;
  }
  
  BHandler.onMouseDown(x, y);

  NowPlaying.down(x, y);

  Seek.down(x, y);
}

function on_mouse_lbtn_up (x, y, mask) {

  BHandler.onMouseUp(x, y);

  NowPlaying.up(x, y);

  Seek.up(x, y);

  Volume.up(x, y);

  // Test ESLyric COM
  // esl.RunPanelContextMenu("参数选项...")
}

function on_mouse_rbtn_up (x, y, mask) {
  return mask != MK_SHIFT;
}

function on_mouse_leave () {

  BHandler.onMouseLeave();

  NowPlaying.leave();

  Volume.leave();
}

function on_volume_change (val) {
}

function on_metadb_changed (handlelist, fromhook) {
  var metadb = fb.GetNowPlaying();

  NowPlaying.getAlbumArt(metadb);
}

function on_playback_new_track (metadb) {
  Seek.playbackTime = '0:00';
  Seek.playbackLength = tf_length.Eval();
  on_metadb_changed();
  repaintAll();
}

function on_playback_seek (time) {
  on_playback_time(time);
}

function on_playback_time (time) {
  Seek.playbackTime = utils.FormatDuration(time);
  Seek.refresh();
  Seek.visible && repaintAll();
}

function on_playback_starting () {
  Seek.refresh();
}

function on_playback_pause (state) {
  repaintAll();
}

function on_playback_stop (reason) {
  if (reason != 2) {
  }
  Seek.playbackTime = '';
  Seek.playbackLength = '';
  NowPlaying.albumold = '#@!';
  on_metadb_changed();
  Seek.refresh();
}

function on_playback_order_changed (new_order) {
  repaintAll();
}

function on_volume_change (val) {
  repaintAll();
}
